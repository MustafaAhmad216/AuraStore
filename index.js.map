{"mappings":"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","sources":["server.js","config/database.js","Routes/indexRoutes.js","Routes/categoryRoutes.js","controllers/categoryController.js","controllers/handlerFactory.js","utilities/appError.js","utilities/apiFeatures.js","models/categoryModel.js","middlewares/uploadImage.js","controllers/authController.js","models/userModel.js","utilities/emailHandler.js","utilities/createToken.js","utilities/validators/categoryValidator.js","middlewares/validatorMiddleware.js","Routes/subCategoryRoutes.js","controllers/subCategoryController.js","models/subCategoryModel.js","utilities/validators/subCategoryValidator.js","Routes/brandRoutes.js","controllers/brandController.js","models/brandModel.js","utilities/validators/brandValidator.js","Routes/couponRoutes.js","controllers/couponController.js","models/couponModel.js","utilities/validators/couponValidator.js","Routes/reviewRoutes.js","controllers/reviewController.js","models/reviewModel.js","models/productModel.js","utilities/validators/reviewValidator.js","Routes/productRoutes.js","controllers/productController.js","utilities/validators/productValidator.js","Routes/userRoutes.js","controllers/userController.js","utilities/validators/userValidator.js","Routes/authRoutes.js","utilities/validators/authValidator.js","Routes/wishlistRoutes.js","controllers/wishlistController.js","utilities/validators/wishlistValidator.js","Routes/addressRoutes.js","controllers/addressController.js","utilities/validators/addressValidator.js","Routes/cartRoutes.js","controllers/cartController.js","models/cartModel.js","Routes/orderRoutes.js","controllers/orderController.js","models/orderModel.js","middlewares/errorMiddleware.js"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\r\n/* -----------------------------Imports----------------------------- */\r\nconst path = require('path');\r\n\r\nconst express = require('express');\r\nconst morgan = require('morgan'); //HTTP request logger middleware\r\nconst dotenv = require('dotenv');\r\nconst cors = require('cors');\r\nconst compression = require('compression');\r\nconst dbConnection = require('./config/database');\r\n\r\nconst mountRoutes = require('./Routes/indexRoutes'); //Function to mount the routes\r\nconst {webhookCheckout} = require('./controllers/orderController');\r\n\r\nconst AppError = require('./utilities/appError');\r\nconst globalErrorHandler = require('./middlewares/errorMiddleware');\r\n\r\n/****************************************************************************/\r\n\r\ndotenv.config({ path: 'config.env' });\r\n//connect with DB\r\ndbConnection();\r\n\r\n//Express App\r\nconst app = express();\r\n\r\n// Enable CORS (Cross-Origin Resource Sharing) to allow requests from other domains\r\napp.use(cors());\r\napp.options('*', cors());\r\n\r\n//compressing all texts send to clients\r\napp.use(compression());\r\n\r\napp.post(\r\n\t'/webhook-checkout',\r\n\texpress.raw({ type: 'application/json' }),\r\n\twebhookCheckout,\r\n);\r\n\r\n// Middlewares\r\napp.use(express.json()); //parser that turns the encoded string to a js object to be readable\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// console.log(process.env);\r\nif (process.env.NODE_ENV !== 'production') {\r\n\tapp.use(morgan('dev'));\r\n\tconsole.log(`mode: ${process.env.NODE_ENV}`);\r\n}\r\n\r\n/****************************************************************/\r\n//3) Routes\r\n\r\n//Mounting our app Routes\r\nmountRoutes(app);\r\n\r\napp.get('/', (req, res) => {\r\n\tres.status(200).send({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Welcome to my API! 😊',\r\n\t});\r\n});\r\napp.all('*', (req, res, next) => {\r\n\t//Create Error snd send it to error handling middleware...\r\n\tnext(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));\r\n});\r\n/*************************************************************************/\r\n\r\n//Global Error Handling Middleware for Express\r\napp.use(globalErrorHandler);\r\n\r\nconst PORT = process.env.PORT || 3000;\r\nconst server = app.listen(PORT, () => {\r\n\tconsole.log(`App running on port ${PORT}!😁`);\r\n});\r\n\r\n//Handling Rejections outside Express\r\nprocess.on('unhandledRejection', (err) => {\r\n\tconsole.error(`UNHANDLED REJECTION!💥💥💥`);\r\n\tconsole.error(`${err.name.toUpperCase()}: ${err.message}⚠️⚠️`);\r\n\t// Close server & exit process\r\n\tserver.close(() => {\r\n\t\tprocess.exit(1);\r\n\t});\r\n});\r\n","const mongoose = require('mongoose');\r\nconst dotenv = require('dotenv');\r\n\r\ndotenv.config({ path: 'config.env' });\r\n\r\nconst dbConnection = function () {\r\n//******************** Database connection logic here ********************\r\n\r\n//connect with DB\r\n\tconst DB = process.env.DATABASE_URI.replace(\r\n\t\t'<PASSWORD>',\r\n\t\tprocess.env.DB_PASSWORD\r\n\t);\r\n\tmongoose.connect(DB).then(() => {\r\n\t\tconsole.log(`DB connection successfully established!🥳`);\r\n\t});\r\n};\r\n\r\nmodule.exports = dbConnection;\r\n","/*Routes that supposed to be called in server.js*/\r\n\r\nconst categoryRouter = require('./categoryRoutes');\r\nconst subCategoryRouter = require('./subCategoryRoutes');\r\nconst brandRouter = require('./brandRoutes');\r\nconst couponRouter = require('./couponRoutes');\r\nconst reviewRouter = require('./reviewRoutes');\r\nconst productRouter = require('./productRoutes');\r\nconst userRouter = require('./userRoutes');\r\nconst authRouter = require('./authRoutes');\r\nconst wishlistRouter = require('./wishlistRoutes');\r\nconst addressRouter = require('./addressRoutes');\r\nconst cartRouter = require('./cartRoutes');\r\nconst orderRouter = require('./orderRoutes');\r\n\r\n/***************************************************************/\r\n\r\n// Mounting routes to the main application\r\nconst mountRoutes = (app) => {\r\n\tapp.use('/api/v1/auth', authRouter);\r\n\tapp.use('/api/v1/users', userRouter);\r\n\tapp.use('/api/v1/categories', categoryRouter);\r\n\tapp.use('/api/v1/subCategories', subCategoryRouter);\r\n\tapp.use('/api/v1/brands', brandRouter);\r\n\tapp.use('/api/v1/products', productRouter);\r\n\tapp.use('/api/v1/coupons', couponRouter);\r\n\tapp.use('/api/v1/reviews', reviewRouter);\r\n\tapp.use('/api/v1/wishlist', wishlistRouter);\r\n\tapp.use('/api/v1/address', addressRouter);\r\n\tapp.use('/api/v1/cart', cartRouter);\r\n\tapp.use('/api/v1/orders', orderRouter);\r\n};\r\n\r\nmodule.exports = mountRoutes;\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst express = require('express');\r\nconst categoryController = require('../controllers/categoryController');\r\nconst authController = require('../controllers/authController');\r\nconst categoryValidator = require('../utilities/validators/categoryValidator');\r\nconst subCategoryRoutes = require('./subCategoryRoutes');\r\n// const validatorMiddleware = require('../middlewares/validatorMiddleware');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\n//                     <<<< Nested Routes >>>>\r\n//GET      /api/v1/categories/:categoryId/subCategories (To get child based on a parent)\r\n//POST     /api/v1/categories/:categoryId/subCategories\r\n\r\nrouter.use('/:categoryId/subCategories', subCategoryRoutes);\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(categoryController.getAllCategories)\r\n\t.post(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tcategoryController.uploadCategoryImage,\r\n\t\tcategoryController.resizeCategoryImage,\r\n\t\tcategoryValidator.createCategoryValidator,\r\n\t\tcategoryController.createCategory,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(categoryValidator.getCategoryValidator, categoryController.getCategory)\r\n\t.patch(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tcategoryController.uploadCategoryImage,\r\n\t\tcategoryController.resizeCategoryImage,\r\n\t\tcategoryValidator.updateCategoryValidator,\r\n\t\tcategoryController.updateCategory,\r\n\t)\r\n\t.delete(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin'),\r\n\t\tcategoryValidator.deleteCategoryValidator,\r\n\t\tcategoryController.deleteCategory,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst sharp = require('sharp');\r\nconst asyncHandler = require('express-async-handler');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst factory = require('./handlerFactory');\r\nconst Category = require('../models/categoryModel');\r\nconst { uploadSingleImage } = require('../middlewares/uploadImage');\r\n \r\n/**********************************************************************************/\r\n\r\n//upload Single Image\r\nexports.uploadCategoryImage = uploadSingleImage('image');\r\n \r\n//--------------------------------------------------------\r\n\r\n//--imageProcessing applied on the buffer image in memory\r\n//--while if we stored the image directly to diskStorage then sharp middleware function is not needed\r\nexports.resizeCategoryImage = asyncHandler(async (req, res, next) => {\r\n\tif (!req.file) return next();\r\n\r\n\treq.file.filename = `category-${uuidv4()}-${Date.now()}.jpeg`;\r\n\r\n\tawait sharp(req.file.buffer)\r\n\t\t.resize(600, 500)\r\n\t\t.toFormat('jpeg')\r\n\t\t.jpeg({ quality: 93 })\r\n\t\t.toFile(`public/img/categories/${req.file.filename}`);\r\n\r\n\t// Save Image to DB\r\n\treq.body.image = req.file.filename;\r\n\r\n\tnext();\r\n});\r\n\r\n/********************************************************************************/\r\n\r\n// @desc\t\tGet All Categories\r\n// @route \tGET  /api/v1/categories\r\n// @access\tPublic\r\nexports.getAllCategories = factory.getAll(Category);\r\n\r\n// @desc\t\tGet a Single Category\r\n// @route \tGET  /api/v1/categories/:id\r\n// @access\tPublic\r\nexports.getCategory = factory.getOne(Category);\r\n\r\n// @desc\t\tCreate Category\r\n// @route \tPOST  /api/v1/categories\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.createCategory = factory.createOne(Category);\r\n\r\n// @desc\t\tUpdate Specific Category\r\n// @route \tPATCH  /api/v1/categories/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.updateCategory = factory.updateOne(Category);\r\n\r\n// @desc\t\tDelete Specific Category\r\n// @route \tDELETE  /api/v1/categories/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.deleteCategory = factory.deleteOne(Category);\r\n","const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../utilities/appError');\r\nconst ApiFeatures = require('../utilities/apiFeatures');\r\n/************************************************************************/\r\n\r\nexports.getAll = (Model) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\t// Nested route handler\r\n\t\tlet filterObj = {};\r\n\r\n\t\tif (Model.modelName === 'SubCategory') {\r\n\t\t\tif (req.params.categoryId)\r\n\t\t\t\tfilterObj = { category: req.params.categoryId };\r\n\t\t}\r\n\t\tif (Model.modelName === 'Review') {\r\n\t\t\tif (req.params.productId)\r\n\t\t\t\tfilterObj = { product: req.params.productId };\r\n\t\t}\r\n\t\tif (Model.modelName === 'Order') {\r\n\t\t\t// eslint-disable-next-line prefer-destructuring\r\n\t\t\tfilterObj = req.filterObj;\r\n\t\t}\r\n\r\n\t\t//(*) Filter, Search, Pagination, Sorting, limitingFields are in ApiFeatures class\r\n\t\t// Building query using ApiFeatures class and then Execute it\r\n\t\tconst documentsCount = await Model.countDocuments();\r\n\t\tconst features = new ApiFeatures(Model.find(filterObj), req.query)\r\n\t\t\t.search()\r\n\t\t\t.filter()\r\n\t\t\t.sort()\r\n\t\t\t.limitFields()\r\n\t\t\t.paginate(documentsCount);\r\n\r\n\t\tconst { paginationResult, query } = features;\r\n\t\tconst document = await query;\r\n\r\n\t\tres.status(200).json({\r\n\t\t\tstatus: 'success',\r\n\t\t\tnumOfPages: paginationResult.numOfPages,\r\n\t\t\tpage: paginationResult.page,\r\n\t\t\tresults: document.length,\r\n\t\t\tdata: {\r\n\t\t\t\tdocument,\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n// @desc\t\tGet a Single document\r\n// @access\tPublic\r\nexports.getOne = (Model, populateOptions) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\tlet query = Model.findById(req.params.id);\r\n\t\tif (populateOptions) query = query.populate(populateOptions);\r\n\r\n\t\tconst doc = await query;\r\n\t\tif (!doc) {\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t`No ${Model.modelName} found with the id:${req.params.id}!😞`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t}\r\n\t\tres.status(200).json({\r\n\t\t\tstatus: 'success',\r\n\t\t\tdata: {\r\n\t\t\t\tdoc,\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n// @desc\t\tCreate a document\r\n// @access\tPrivate\r\nexports.createOne = (Model) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\tconst doc = await Model.create(req.body);\r\n\t\tres.status(201).json({\r\n\t\t\tstatus: 'success',\r\n\t\t\tmessage: `${Model.modelName} created successfully! 🤗`,\r\n\t\t\tdata: doc,\r\n\t\t});\r\n\t});\r\n\r\n// @desc\t\tUpdate Specific document\r\n// @access\tPrivate\r\nexports.updateOne = (Model) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\tif (req.body.password || req.body.passwordConfirm)\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t'Can not update password with this route! Try /updatePassword',\r\n\t\t\t\t\t403,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\tconst doc = await Model.findByIdAndUpdate(req.params.id, req.body, {\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t});\r\n\t\tif (!doc) {\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t`No ${Model.modelName} found with the id:${req.params.id}!😞`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t}\r\n\t\t//Trigger \"save\" event when is updated\r\n\t\tdoc.save();\r\n\r\n\t\tres.status(200).json({\r\n\t\t\tstatus: 'success',\r\n\t\t\tmessage: `${Model.modelName} updated successfully!`,\r\n\t\t\tdata: doc,\r\n\t\t});\r\n\t});\r\n\r\n// @desc\t\tDelete Specific document\r\n// @access\tPrivate\r\nexports.deleteOne = (Model) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\tconst doc = await Model.findByIdAndDelete(req.params.id);\r\n\t\t// const doc = Model.findById(req.params.id);\r\n\r\n\t\tif (!doc) {\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t`No ${Model.modelName} found with the id of ${req.params.id}`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t//Nothing worked in the Schema middleware so we're going to apply it here\r\n\t\tif (Model.modelName === 'Review')\r\n\t\t\tawait Model.calcAvgRatingsAndQuantity(doc.product);\r\n\r\n\t\tres.status(204).send();\r\n\t});\r\n","//@desc \t\tThis class is responsible for operational(predictable) errors\r\n\r\nclass AppError extends Error {\r\n\tconstructor(message, statusCode) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.statusCode = statusCode;\r\n\t\tthis.status = `${statusCode}`.startsWith('4') ? 'Fail' : 'Error';\r\n\t\tthis.isOperational = true;\r\n\t\tError.captureStackTrace(this, this.constructor);\r\n\t}\r\n}\r\n\r\nmodule.exports = AppError;\r\n","/* eslint-disable node/no-unsupported-features/es-syntax */\r\nclass ApiFeatures {\r\n\tconstructor(query, queryString) {\r\n\t\tthis.query = query;\r\n\t\tthis.queryString = queryString;\r\n\t}\r\n\r\n\tfilter() {\r\n\t\t//1) Filtering simple queries\r\n\t\tconst queryObj = { ...this.queryString };\r\n\t\tconst excludedFields = [\r\n\t\t\t'page',\r\n\t\t\t'limit',\r\n\t\t\t'fields',\r\n\t\t\t'skip',\r\n\t\t\t'sort',\r\n\t\t\t'keyword',\r\n\t\t];\r\n\t\texcludedFields.forEach((field) => delete queryObj[field]);\r\n\r\n\t\t//2) Filtering Advanced queries\r\n\t\tlet queryStr = JSON.stringify(queryObj);\r\n\t\tqueryStr = queryStr.replace(\r\n\t\t\t/\\b(gte|gt|lte|lt|eq|ne|in|nin)\\b/g,\r\n\t\t\t(match) => `$${match}`,\r\n\t\t);\r\n\t\tthis.query = this.query.find(JSON.parse(queryStr));\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsort() {\r\n\t\tif (this.queryString.sort) {\r\n\t\t\tconst sortBy = this.queryString.sort.replaceAll(',', ' ');\r\n\t\t\t// const sortBy = this.queryString.sort.split(',').join(' ');\r\n\t\t\tthis.query = this.query.sort(sortBy);\r\n\t\t} else {\r\n\t\t\tthis.query = this.query.sort('-createdAt'); // default sort by createdAt in descending order if no sort parameter is provided.\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tlimitFields() {\r\n\t\tif (this.queryString.fields) {\r\n\t\t\tconst fields = this.queryString.fields.replaceAll(',', ' ');\r\n\t\t\t// const fields = this.queryString.fields.split(',').join(' ');\r\n\t\t\tthis.query = this.query.select(fields);\r\n\t\t} else {\r\n\t\t\tthis.query = this.query.select('-__v');\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tif (this.queryString.keyword) {\r\n\t\t\tconst { keyword } = this.queryString;\r\n\r\n\t\t\tif (this.query.mongooseCollection.modelName === 'Product') {\r\n\t\t\t\tthis.query = this.query.find({\r\n\t\t\t\t\t$or: [\r\n\t\t\t\t\t\t{ title: { $regex: keyword, $options: 'i' } },\r\n\t\t\t\t\t\t{ description: { $regex: keyword, $options: 'i' } },\r\n\t\t\t\t\t],\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.query = this.query.find({\r\n\t\t\t\t\t$or: [\r\n\t\t\t\t\t\t{ name: { $regex: keyword, $options: 'i' } },\r\n\t\t\t\t\t\t{ slug: { $regex: keyword, $options: 'i' } },\r\n\t\t\t\t\t],\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpaginate(documentsCount) {\r\n\t\tconst page = +this.queryString.page || 1;\r\n\t\tconst limit = +this.queryString.limit || 15;\r\n\t\tconst skip = (page - 1) * limit;\r\n\r\n\t\t//Pagination Result\r\n\t\tconst pagination = {};\r\n\t\tpagination.page = page;\r\n\t\tpagination.limit = limit;\r\n\t\tpagination.numOfPages = Math.ceil(documentsCount / limit);\r\n\r\n\t\t//Page 1 & there're other pages\r\n\t\tif (page === 1 && pagination.numOfPages > 1) {\r\n\t\t\tpagination.nextPage = page + 1;\r\n\t\t}\r\n\t\tif (page === pagination.numOfPages) {\r\n\t\t\tpagination.prevPage = page - 1;\r\n\t\t}\r\n\t\tif (page > 1 && page < pagination.numOfPages) {\r\n\t\t\tpagination.nextPage = page + 1;\r\n\t\t\tpagination.prevPage = page - 1;\r\n\t\t}\r\n\r\n\t\tthis.query = this.query.skip(skip).limit(limit);\r\n\t\tthis.paginationResult = pagination;\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nmodule.exports = ApiFeatures;\r\n","/* eslint-disable prefer-arrow-callback */\r\nconst mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\nconst slugify = require('slugify');\r\n\r\n//1- Create Schema\r\nconst categorySchema = new Schema(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Category must have a Name!'],\r\n\t\t\tunique: [true, 'Category Name must be unique!'],\r\n\t\t\tminlength: [3, 'Category Name must be more than 2 characters!'],\r\n\t\t\tmaxlength: [50, 'Category Name must be less than 50 characters!'],\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: String,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\timage: {\r\n\t\t\ttype: String,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\t// toJSON: { virtuals: true },\r\n\t\ttoObject: { virtuals: true },\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//Virtual Populate\r\n// categorySchema.virtual('subCategory', {\r\n// \tref: 'SubCategory',\r\n// \tforeignField: 'category',\r\n// \tlocalField: '_id',\r\n// });\r\n\r\n//------------------------------------------------------------------------\r\n//DOCUMENT MIDDLEWARE: runs before or after .save() and .create() but not on .insertMany({})\r\ncategorySchema.pre('save', function (next) {\r\n\tif (!this.slug) {\r\n\t\tthis.slug = slugify(this.name);\r\n\t}\r\n\tnext();\r\n});\r\n\r\ncategorySchema.pre('findOneAndUpdate', function (next) {\r\n\tconst update = this.getUpdate();\r\n\tif (update.name) {\r\n\t\tupdate.slug = slugify(update.name, { lower: true });\r\n\t}\r\n\tnext();\r\n});\r\n// categorySchema.pre(/^find/, function (next) {\r\n// \tthis.find().select('-createdAt -updatedAt');\r\n// \tnext();\r\n// });\r\n//------------------------------------------------------------------\r\n//Set ImageUrl\r\nconst setImageUrl = function (doc) {\r\n\tif (doc.image) {\r\n\t\tconst imageUrl = `${process.env.BASE_URL}/img/categories/${doc.image}`;\r\n\t\tdoc.image = imageUrl;\r\n\t}\r\n};\r\n\r\n// Adjust ImageURL After Retrieving or Updating a document\r\ncategorySchema.post('init', (doc) => setImageUrl(doc));\r\n\r\n// Adjust ImageURL After Creating a document\r\ncategorySchema.post('save', (doc) => setImageUrl(doc));\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Category', categorySchema);\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst multer = require('multer');\r\n// const sharp = require('sharp');\r\n// const asyncHandler = require('express-async-handler');\r\n// const { v4: uuidv4 } = require('uuid');\r\nconst AppError = require('../utilities/appError');\r\n\r\n/************************************************************************/\r\n\r\n// Multer setup\r\nconst multerOptions = () => {\r\n\t// 1- Memory Storage Engine\r\n\t//--Store the image as a buffer in memory to be saved later in diskstorage\r\n\t//--(storing image after imageProcessing)\r\n\tconst multerStorage = multer.memoryStorage();\r\n\r\n\t// 2- File Filter\r\n\tconst multerFilter = (req, file, cb) => {\r\n\t\tif (file.mimetype.split('/')[0] === 'image') {\r\n\t\t\tcb(null, true);\r\n\t\t} else {\r\n\t\t\tcb(new AppError('Please Upload a valid image!', 400), false);\r\n\t\t}\r\n\t};\r\n\r\n\t// 3- upload the image\r\n\tconst upload = multer({ storage: multerStorage, fileFilter: multerFilter });\r\n\treturn upload;\r\n};\r\n\r\nexports.uploadSingleImage = (fieldName) => multerOptions().single(fieldName);\r\n\r\nexports.uploadMultipleImages = (arrayOfFields) =>\r\n\tmulterOptions().fields(arrayOfFields);\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\n// const { promisify } = require('util');\r\nconst crypto = require('crypto');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst asyncHandler = require('express-async-handler');\r\n// const bcrypt = require('bcryptjs');\r\n\r\nconst User = require('../models/userModel');\r\nconst AppError = require('../utilities/appError');\r\nconst { sendEmail } = require('../utilities/emailHandler');\r\nconst createToken = require('../utilities/createToken');\r\n\r\n/************************************************************************/\r\n\r\n//@desc\t\tsign up\r\n//@route \tPOST /api/v1/auth/signup\r\n//@access \tPublic\r\nexports.signup = asyncHandler(async (req, res, next) => {\r\n\t// 1- create a new user\r\n\tconst user = await User.create({\r\n\t\tname: req.body.name,\r\n\t\temail: req.body.email,\r\n\t\tphone: req.body.phone,\r\n\t\tpassword: req.body.password,\r\n\t\tpasswordConfirm: req.body.passwordConfirm,\r\n\t});\r\n\r\n\t// 2- generate JWT token\r\n\tconst token = createToken(user._id);\r\n\r\n\t// 3- send response\r\n\tres.status(201).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'User created successfully! ',\r\n\t\ttoken,\r\n\t\tdata: { user },\r\n\t});\r\n});\r\n\r\n//@desc\t\tlogin\r\n//@route \tPOST /api/v1/auth/login\r\n//@access \tPublic\r\nexports.login = asyncHandler(async (req, res, next) => {\r\n\tconst { email, password } = req.body;\r\n\r\n\t// 1- check if user provided email and password (in loginValidator)\r\n\r\n\t// 2) check if user exists & if password is correct\r\n\tconst user = await User.findOne({ email: email })\r\n\t\t.select('+password')\r\n\t\t.select('+active');\r\n\r\n\tif (!user || !user.correctPassword(password, user.password))\r\n\t\t// if (!user || !(await bcrypt.compare(password, user.password)))\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t'Please, check if your Email and Password are correct',\r\n\t\t\t\t401,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\t// 3) make user active\r\n\t// user.active = true;\r\n\r\n\t// 4) generate JWT token\r\n\tconst token = createToken(user._id);\r\n\r\n\t// 5) send response\r\n\tres.json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'User logged in successfully! ',\r\n\t\ttoken,\r\n\t\tdata: { user },\r\n\t});\r\n});\r\n\r\n//@desc\t\tMake sure user is authenticated\r\nexports.protect = asyncHandler(async (req, res, next) => {\r\n\tlet token;\r\n\r\n\t// 1) Check if token exists, and catch it if exists\r\n\tif (\r\n\t\treq.headers.authorization &&\r\n\t\treq.headers.authorization.startsWith('Bearer')\r\n\t) {\r\n\t\ttoken = req.headers.authorization.split(' ')[1];\r\n\t}\r\n\tif (!token) {\r\n\t\treturn next(new AppError('You are not logged in! Please log in.', 401));\r\n\t}\r\n\r\n\t// 2) Verify token (No Changes Happened, Token Not Expired)\r\n\t// const decoded = await promisify(jwt.verify)(\r\n\t// \ttoken,\r\n\t// \tprocess.env.JWT_SECRET_KEY,\r\n\t// );\r\n\tconst decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);\r\n\r\n\t// 3) Check if user exists\r\n\tconst currentUser = await User.findById(decoded.userId);\r\n\tif (!currentUser)\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t\"Unauthorized login! the user with this ID doesn't exist\",\r\n\t\t\t\t401,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\t// 4) Check if user hasn't changed his password after the token was created\r\n\tif (currentUser.passwordChangedAt) {\r\n\t\tif (currentUser.passwordChangedAfter(decoded.iat)) {\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t\"You've recently changed his password! Please login again.\",\r\n\t\t\t\t\t401,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t// 5) If everything is fine, grant access to protected route\r\n\treq.user = currentUser;\r\n\tnext();\r\n});\r\n\r\n//@desc\t\t[Authorization --> User Permissions]\r\n//@desc\t\trestrict some requests to admins or managers only\r\nexports.restrictTo = (...roles) =>\r\n\tasyncHandler(async (req, res, next) => {\r\n\t\t// 1) access allowed roles\r\n\t\t// 2) access registered users (req.user.role)\r\n\t\tif (!roles.includes(req.user.role)) {\r\n\t\t\treturn next(\r\n\t\t\t\tnew AppError(\r\n\t\t\t\t\t\"You don't have permission to perform this action!\",\r\n\t\t\t\t\t403,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tnext();\r\n\t});\r\n\r\n//@desc\t\tforgot Password\r\n//@route \tPOST /api/v1/auth/forgetPassword\r\n//@access \tPublic\r\nexports.forgotPassword = asyncHandler(async (req, res, next) => {\r\n\t// 1) Get User by Email Address\r\n\tconst user = await User.findOne({ email: req.body.email });\r\n\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the email: ${req.body.email}`),\r\n\t\t\t404,\r\n\t\t);\r\n\t}\r\n\r\n\t// 2) If user Exists, Generate encrypted reset random 6 digits code\r\n\tconst resetCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n\tconst hashedResetCode = crypto\r\n\t\t.createHash('sha256')\r\n\t\t.update(resetCode)\r\n\t\t.digest('hex');\r\n\r\n\t// 3) Save Hashed Reset Code into DB\r\n\tuser.passwordResetToken = hashedResetCode;\r\n\tuser.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes\r\n\tuser.passwordResetVerified = false;\r\n\r\n\tawait user.save({ validateBeforeSave: false });\r\n\r\n\t// 4) Send the reset code via Email Address\r\n\tconst message = `Hi ${user.name.split(' ')[0]},\\n\\nWe received a request to reset your password on Ecommerce Api Website.\\n\\nHere's Your Reset Code:  { ${resetCode} } 😊\\nYou should know it's valid untill ${user.passwordResetExpires}\\n\\nThanks for helping us keep your data secure!`;\r\n\ttry {\r\n\t\tawait sendEmail({\r\n\t\t\temail: user.email,\r\n\t\t\tsubject: `Password Reset Token`,\r\n\t\t\tmessage,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tuser.passwordResetToken = undefined;\r\n\t\tuser.passwordResetExpires = undefined;\r\n\t\tuser.passwordResetVerified = undefined;\r\n\t\tawait user.save({ validateBeforeSave: false });\r\n\r\n\t\treturn next(\r\n\t\t\tnew AppError(\"there's an error in sending reset token via email\", 500),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: `Your password Reset Code is sent via Email: <${user.email}>`,\r\n\t});\r\n\tnext();\r\n});\r\n\r\n//@desc\t\tverify Reset Password Code\r\n//@route \tPATCH /api/v1/auth/verifyResetCode\r\n//@access \tPublic\r\nexports.verifyResetCode = asyncHandler(async (req, res, next) => {\r\n\t// 1) Get Reset Code from the body and hash it to match the one in DB\r\n\tconst hashedResetCode = crypto\r\n\t\t.createHash('sha256')\r\n\t\t.update(req.body.resetCode)\r\n\t\t.digest('hex');\r\n\r\n\t// 2) Get User by its resetPasswordCode\r\n\tconst user = await User.findOne({\r\n\t\tpasswordResetToken: hashedResetCode,\r\n\t\tpasswordResetExpires: { $gt: Date.now() },\r\n\t});\r\n\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`The Code you've entered {${req.body.resetCode}} is invalid or has expired`,\r\n\t\t\t\t400,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\r\n\t// 3) Validate User's reset code\r\n\tuser.passwordResetVerified = true;\r\n\tawait user.save({ validateBeforeSave: false });\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage:\r\n\t\t\t'Code is verified successfully, please visit /api/v1/auth/resetPassword to reset your password',\r\n\t});\r\n});\r\n\r\n//@desc\t\tReset Password\r\n//@route \tPATCH /api/v1/auth/resetPassword\r\n//@access \tPublic\r\nexports.resetPassword = asyncHandler(async (req, res, next) => {\r\n\t// 1) Get User by Email Address\r\n\tconst user = await User.findOne({ email: req.body.email });\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the email: ${req.body.email}`, 404),\r\n\t\t);\r\n\t}\r\n\r\n\t// 2) Check if passwordResetVerified = true\r\n\tif (!user.passwordResetVerified) {\r\n\t\treturn next(new AppError('Reset code is not verified or expired', 400));\r\n\t}\r\n\r\n\t// 3) update user password\r\n\tuser.password = req.body.password;\r\n\tuser.passwordConfirm = req.body.passwordConfirm;\r\n\tuser.passwordResetToken = undefined;\r\n\tuser.passwordResetExpires = undefined;\r\n\tuser.passwordResetVerified = undefined;\r\n\tuser.passwordChangedAt = Date.now();\r\n\tawait user.save();\r\n\r\n\t// 4) Everything's fine ? log the user in, send JWT\r\n\tconst token = createToken(user._id);\r\n\r\n\t// 5) Send success message and token to the user\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Password has been reset successfully!',\r\n\t\ttoken,\r\n\t\tdata: { user },\r\n\t});\r\n});\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs');\r\nconst slugify = require('slugify');\r\n\r\nconst { Schema } = mongoose;\r\n\r\n/***********************************************************************/\r\n\r\n//1- Create Schema\r\nconst userSchema = new Schema(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each User must have a Name!'],\r\n\t\t\tminlength: [3, 'Name must be more than 2 characters!'],\r\n\t\t\tmaxlength: [52, 'Name must be less than 52 characters!'],\r\n\t\t\ttrim: true,\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: String,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\temail: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each User must have an Email!'],\r\n\t\t\tunique: [true, 'Email must be unique!'],\r\n\t\t},\r\n\t\tphone: {\r\n\t\t\ttype: String,\r\n\t\t\t// unique: [true, 'This phone number is entered previously'],\r\n\t\t\t// match: [\r\n\t\t\t// \t/^\\+?\\d{1,11}$/,\r\n\t\t\t// \t'Phone Number must be on the egyptian format',\r\n\t\t\t// ],\r\n\t\t},\r\n\t\tprofilePicture: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: 'default.jpg',\r\n\t\t},\r\n\t\trole: {\r\n\t\t\ttype: String,\r\n\t\t\tenum: ['user', 'admin', 'manager'],\r\n\t\t\tdefault: 'user',\r\n\t\t},\r\n\t\t//Embedded Document\r\n\t\taddress: [\r\n\t\t\t{\r\n\t\t\t\tid: { type: Schema.ObjectId },\r\n\t\t\t\talias: {\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\trequired: [true, 'Address must have an alias!'],\r\n\t\t\t\t\tminlength: [3, 'Alias must be more than 2 characters!'],\r\n\t\t\t\t\tmaxlength: [20, 'Alias must be less than 20 characters!'],\r\n\t\t\t\t\ttrim: true,\r\n\t\t\t\t\tlowercase: true,\r\n\t\t\t\t},\r\n\t\t\t\tdetails: {\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\trequired: [true, 'Address must be detailed!'],\r\n\t\t\t\t\tminlength: [10, 'Address must be more than 10 characters!'],\r\n\t\t\t\t\tmaxlength: [90, 'Address must be less than 90 characters!'],\r\n\t\t\t\t\ttrim: true,\r\n\t\t\t\t\tlowercase: true,\r\n\t\t\t\t},\r\n\t\t\t\tpostalCode: Number,\r\n\t\t\t\tphone: String,\r\n\t\t\t\tcity: {\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\tlowercase: true,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tpassword: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Please provide a valid password!'],\r\n\t\t\tminlength: [8, 'A password must be at least 8 characters!'],\r\n\t\t\tmaxlength: [70, \"A password shouldn't be more than 70 characters!\"],\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tpasswordConfirm: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Please confirm your password!'],\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tpasswordChangedAt: {\r\n\t\t\ttype: Date,\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tpasswordResetToken: {\r\n\t\t\ttype: String,\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tpasswordResetExpires: {\r\n\t\t\ttype: Date,\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tpasswordResetVerified: {\r\n\t\t\ttype: Boolean,\r\n\t\t\t// select: false,\r\n\t\t},\r\n\t\tactive: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t\tselect: false,\r\n\t\t},\r\n\t\t//child reference (one to many)\r\n\t\twishlist: [\r\n\t\t\t{\r\n\t\t\t\ttype: Schema.ObjectId,\r\n\t\t\t\tref: 'Product',\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t},\r\n);\r\n//------------------------------------------------------------------------\r\n//DOCUMENT MIDDLEWARE: runs before or after .save() and .create() but not on .insertMany({})\r\nuserSchema.pre('save', function (next) {\r\n\tif (!this.slug) {\r\n\t\tthis.slug = slugify(this.name);\r\n\t}\r\n\tnext();\r\n});\r\n\r\nuserSchema.pre(/^find/, function (next) {\r\n\tthis.find({ active: { $ne: false } });\r\n\tnext();\r\n});\r\n\r\nuserSchema.pre('findOneAndUpdate', function (next) {\r\n\tconst update = this.getUpdate();\r\n\tif (update.name) {\r\n\t\tupdate.slug = slugify(update.name, { lower: true });\r\n\t}\r\n\tnext();\r\n});\r\n\r\nuserSchema.pre('save', async function (next) {\r\n\t// Hash the password if it has been modified (or is new)\r\n\tif (!this.isModified('password')) return next();\r\n\r\n\t//Hash the password with cost of 12\r\n\tthis.password = await bcrypt.hash(this.password, 12);\r\n\r\n\t//Delete passwordConfirm field\r\n\tthis.passwordConfirm = undefined;\r\n\tnext();\r\n});\r\n\r\nuserSchema.methods.correctPassword = async function (\r\n\tcandidatePassword,\r\n\tuserPassword,\r\n) {\r\n\treturn await bcrypt.compare(candidatePassword, userPassword);\r\n};\r\n\r\nuserSchema.methods.passwordChangedAfter = function (decodedIat) {\r\n\tif (this.passwordChangedAt) {\r\n\t\tconst changedTimeStamp = +this.passwordChangedAt.getTime() / 1000;\r\n\r\n\t\treturn decodedIat < changedTimeStamp;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\n//------------------------------------------------------------------\r\n//Set ImageUrl\r\nconst setImageUrl = function (doc) {\r\n\tif (doc.profilePicture) {\r\n\t\tdoc.profilePicture = `${process.env.BASE_URL}/img/users/${doc.profilePicture}`;\r\n\t}\r\n};\r\n\r\n// Adjust ImageURL After Retrieving or Updating a document\r\nuserSchema.post('init', (doc) => setImageUrl(doc));\r\n\r\n// Adjust ImageURL After Creating a document\r\nuserSchema.post('save', (doc) => setImageUrl(doc));\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('User', userSchema);\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst nodemailer = require('nodemailer');\r\n\r\nexports.sendEmail = async (options) => {\r\n\t// 1) Create Transporter (service that will send email (ex. Gmail, mailtrap, sendGrid))\r\n\tconst transporter = nodemailer.createTransport({\r\n\t\thost: process.env.MAILTRAP_HOST,\r\n\t\tport: process.env.MAILTRAP_PORT,\r\n\t\t// secure: true,\r\n\t\tauth: {\r\n\t\t\tuser: process.env.MAILTRAP_USER,\r\n\t\t\tpass: process.env.MAILTRAP_PASSWORD,\r\n\t\t},\r\n\t});\r\n\r\n\t// 2) Define Email Options (ex. From, To, Subject and Content)\r\n\tconst mailOptions = {\r\n\t\tfrom: process.env.MAILTRAP_FROM,\r\n\t\tto: options.email,\r\n\t\tsubject: options.subject,\r\n\t\ttext: options.message,\r\n\t};\r\n\r\n\t// 3) SendEmail\r\n\tawait transporter.sendMail(mailOptions);\r\n};\r\n\r\n// module.exports = sendEmail;\r\n","const jwt = require('jsonwebtoken');\r\n\r\nconst createToken = (id) =>\r\n\tjwt.sign({ userId: id }, process.env.JWT_SECRET_KEY, {\r\n\t\texpiresIn: process.env.JWT_EXPIRES_IN,\r\n\t});\r\n\r\nmodule.exports = createToken;\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\n\r\nexports.getCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createCategoryValidator = [\r\n\tcheck('name')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Category must have a Name!')\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each Category Name must be between 3 and 50 characters'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each Category Name must be between 3 and 50 characters'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const mongoose = require('mongoose');\r\nconst { validationResult } = require('express-validator');\r\n\r\n\r\n// //---------------------------- HELPER FUNCTIONS ----------------------------\r\nexports.validateCategoryId = (req, res, next) => {\r\n\tif (!mongoose.Types.ObjectId.isValid(req.params.id)) {\r\n\t\treturn res.status(400).json({\r\n\t\t\tstatus: 'Error',\r\n\t\t\tmessage: `Invalid Object ID format: ${req.params.id}`,\r\n\t\t});\r\n\t}\r\n\tnext(); // Continue to the next middleware or route handler\r\n};\r\n\r\n//-----------------------------------------------------------------------\r\nexports.validationMiddleware = (req, res, next) => {\r\n\tconst errors = validationResult(req);\r\n\tif (!errors.isEmpty()) {\r\n\t\treturn res.status(400).json({ errors: errors.array() });\r\n\t}\r\n\tnext();\r\n};\r\n","const express = require('express');\r\nconst subCategoryController = require('../controllers/subCategoryController');\r\nconst authController = require('../controllers/authController');\r\nconst subCategoryValidator = require('../utilities/validators/subCategoryValidator');\r\n\r\n/*******************************************************************************/\r\n\r\n//mergeParams Allow us to access parameeters from other Routers\r\nconst router = express.Router({ mergeParams: true });\r\n\r\n//                     <<<< Nested Routes >>>>\r\n//GET      /api/v1/categories/:categoryId/subCategories (To get child based on a parent)\r\n//POST     /api/v1/categories/:categoryId/subCategories\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(subCategoryController.getAllSubCategories)\r\n\t.post(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tsubCategoryController.setCategoryIdToBody,\r\n\t\tsubCategoryValidator.createSubCategoryValidator,\r\n\t\tsubCategoryController.createSubCategory,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(\r\n\t\tsubCategoryValidator.getSubCategoryValidator,\r\n\t\tsubCategoryController.getSubCategory,\r\n\t)\r\n\t.patch(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tsubCategoryValidator.updateSubCategoryValidator,\r\n\t\tsubCategoryController.updateSubCategory,\r\n\t)\r\n\t.delete(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin'),\r\n\t\tsubCategoryValidator.deleteSubCategoryValidator,\r\n\t\tsubCategoryController.deleteSubCategory,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","const factory = require('./handlerFactory');\r\nconst SubCategory = require('../models/subCategoryModel');\r\n\r\n/**********************************************************************************/\r\n\r\nexports.setCategoryIdToBody = (req, res, next) => {\r\n\t//Nested Route\r\n\treq.body.category = req.body.category || req.params.categoryId;\r\n\tnext();\r\n};\r\n\r\n// @desc\t\tGet All Sub-Categories\r\n// @route \tGET  /api/v1/subCategories\r\n// @access\tPublic\r\nexports.getAllSubCategories = factory.getAll(SubCategory);\r\n\r\n// @desc\t\tGet a Single Sub-Category\r\n// @route \tGET  /api/v1/subCategories/:id\r\n// @access\tPublic\r\nexports.getSubCategory = factory.getOne(SubCategory);\r\n\r\n// @desc\t\tCreate Sub-Category\r\n// @route \tPOST  /api/v1/subCategories/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.createSubCategory = factory.createOne(SubCategory);\r\n\r\n//@desc\t\tUpdate Sub-Category\r\n//@route\t\tPATCH /api/v1/subCategories/:id\r\n//@access\tPrivate --> (Admin, Manager)\r\nexports.updateSubCategory = factory.updateOne(SubCategory);\r\n\r\n// @desc\t\tDelete Specific Sub-Category\r\n// @route \tDELETE  /api/v1/subCategories/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.deleteSubCategory = factory.deleteOne(SubCategory);\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\nconst slugify = require('slugify');\r\n\r\nconst subCategorySchema = new Schema(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Sub-Category must have a Name!'],\r\n\t\t\tunique: [true, 'Sub-Category Name must be unique!'],\r\n\t\t\ttrim: true,\r\n\t\t\tminlength: [2, 'Sub-Category Name must be more than 2 characters!'],\r\n\t\t\tmaxlength: [50, 'Sub-Category Name must be less than 50 characters!'],\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: String,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tcategory: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'Category',\r\n\t\t\trequired: [true, 'Each Sub-Category must belong to a main Category'],\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\t// toJSON: { virtuals: true },\r\n\t\ttoObject: { virtuals: true },\r\n\t},\r\n);\r\n\r\nsubCategorySchema.pre('save', function (next) {\r\n\tif (!this.slug) this.slug = slugify(this.name);\r\n\tnext();\r\n});\r\n\r\nsubCategorySchema.pre('findOneAndUpdate', function (next) {\r\n\tconst update = this.getUpdate();\r\n\tif (update.name) {\r\n\t\tupdate.slug = slugify(update.name, { lower: true });\r\n\t}\r\n\tnext();\r\n});\r\n\r\n//------------------------------------------------------------------------\r\nsubCategorySchema.pre(/^find/, function (next) {\r\n\tthis.populate([\r\n\t\t{\r\n\t\t\tpath: 'category',\r\n\t\t\tselect: 'name',\r\n\t\t},\r\n\t]);\r\n\tthis.find().select('-createdAt -updatedAt')\r\n\tnext();\r\n});\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('SubCategory', subCategorySchema);\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst Category = require('../../models/categoryModel');\r\nconst AppError = require('../appError');\r\n\r\n// Define a middleware function to validate user input\r\n\r\nexports.getSubCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createSubCategoryValidator = [\r\n\tcheck('name')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Sub-Category must have a Name!')\r\n\t\t.isLength({ min: 2, max: 50 })\r\n\t\t.withMessage(\r\n\t\t\t'Each Sub-Category Name must be between 3 and 50 characters',\r\n\t\t),\r\n\tcheck('category')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Sub-Category must belong to a Category!')\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!')\r\n\t\t.custom(async (categoryId, { req }) => {\r\n\t\t\t//Check if categoryId already exists\r\n\t\t\tconst categoryExist = await Category.findById(categoryId);\r\n\t\t\tif (!categoryExist) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`No Category found with the id: ${categoryId} 😕`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateSubCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteSubCategoryValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst brandController = require('../controllers/brandController');\r\nconst brandValidator = require('../utilities/validators/brandValidator');\r\nconst authController = require('../controllers/authController');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(authController.protect, brandController.getAllBrands)\r\n\t.post(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tbrandController.uploadBrandImage,\r\n\t\tbrandController.resizeBrandImage,\r\n\t\tbrandValidator.createBrandValidator,\r\n\t\tbrandController.createBrand,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(brandValidator.getBrandValidator, brandController.getBrand)\r\n\t.patch(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tbrandController.uploadBrandImage,\r\n\t\tbrandController.resizeBrandImage,\r\n\t\tbrandValidator.updateBrandValidator,\r\n\t\tbrandController.updateBrand,\r\n\t)\r\n\t.delete(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin'),\r\n\t\tbrandValidator.deleteBrandValidator,\r\n\t\tbrandController.deleteBrand,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst sharp = require('sharp');\r\nconst asyncHandler = require('express-async-handler');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst factory = require('./handlerFactory');\r\nconst { uploadSingleImage } = require('../middlewares/uploadImage');\r\nconst Brand = require('../models/brandModel');\r\n\r\n/**********************************************************************************/\r\n\r\n//upload Single Image\r\nexports.uploadBrandImage = uploadSingleImage('image');\r\n\r\n//--------------------------------------------------------\r\n\r\n//--imageProcessing applied on the buffer image in memory\r\n//--while if we stored the image directly to diskStorage then sharp middleware function is not needed\r\nexports.resizeBrandImage = asyncHandler(async (req, res, next) => {\r\n\tif (!req.file) return next(); \r\n\r\n\treq.file.filename = `brand-${uuidv4()}-${Date.now()}.jpeg`;\r\n\r\n\tawait sharp(req.file.buffer)\r\n\t\t.resize(300, 300)\r\n\t\t.toFormat('jpeg')\r\n\t\t.jpeg({ quality: 90 })\r\n\t\t.toFile(`public/img/brands/${req.file.filename}`);\r\n\r\n\t// Save Image to DB\r\n\treq.body.image = req.file.filename;\r\n\r\n\tnext();\r\n});\r\n\r\n/**********************************************************************************/\r\n\r\n// @desc\t\tGet All brands\r\n// @route \tGET  /api/v1/brands\r\n// @access\tPublic\r\nexports.getAllBrands = factory.getAll(Brand);\r\n\r\n// @desc\t\tGet a Single Brand\r\n// @route \tGET  /api/v1/brands/:id\r\n// @access\tPublic\r\nexports.getBrand = factory.getOne(Brand);\r\n\r\n// @desc\t\tCreate Brand\r\n// @route \tPOST  /api/v1/brands/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.createBrand = factory.createOne(Brand);\r\n\r\n// @desc\t\tUpdate Specific Brand\r\n// @route \tPATCH  /api/v1/brands/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.updateBrand = factory.updateOne(Brand);\r\n\r\n// @desc\t\tDelete Specific Brand\r\n// @route \tDELETE  /api/v1/brands/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.deleteBrand = factory.deleteOne(Brand);\r\n\r\n// PUT modifies a record's information and creates a new record if one is not available, and PATCH updates a resource without sending the entire body in the request.\r\n// PATCH can save you some bandwidth, as updating a field with PATCH means less data being transferred than sending the whole record with PUT.\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\nconst slugify = require('slugify');\r\n\r\n//1- Create Schema\r\nconst brandSchema = new Schema(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Brand must have a Name!'],\r\n\t\t\tunique: [true, 'Brand Name must be unique!'],\r\n\t\t\tminlength: [3, 'Brand Name must be more than 2 characters!'],\r\n\t\t\tmaxlength: [30, 'Brand Name must be less than 50 characters!'],\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: String,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\timage: {\r\n\t\t\ttype: String,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\t// toJSON: { virtuals: true },\r\n\t\ttoObject: { virtuals: true },\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//DOCUMENT MIDDLEWARE: runs before or after .save() and .create() but not on .insertMany({})\r\nbrandSchema.pre('save', function (next) {\r\n\tif (!this.slug) {\r\n\t\tthis.slug = slugify(this.name);\r\n\t}\r\n\tnext();\r\n});\r\n\r\nbrandSchema.pre('findOneAndUpdate', function (next) {\r\n\tconst update = this.getUpdate();\r\n\tif (update.name) {\r\n\t\tupdate.slug = slugify(update.name, { lower: true });\r\n\t}\r\n\tnext();\r\n});\r\n// brandSchema.pre(/^find/, function (next) {\r\n// \tthis.find().select('-createdAt -updatedAt');\r\n// \tnext();\r\n// });\r\n\r\n//------------------------------------------------------------------\r\n//Set ImageUrl\r\nconst setImageUrl = function (doc) {\r\n\tif (doc.image) {\r\n\t\tconst imageUrl = `${process.env.BASE_URL}/img/brands/${doc.image}`;\r\n\t\tdoc.image = imageUrl;\r\n\t}\r\n};\r\n\r\n// Adjust ImageURL After Retrieving or Updating a document\r\nbrandSchema.post('init', (doc) => setImageUrl(doc));\r\n\r\n// Adjust ImageURL After Creating a document\r\nbrandSchema.post('save', (doc) => setImageUrl(doc));\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Brand', brandSchema);\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\n\r\nexports.getBrandValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createBrandValidator = [\r\n\tcheck('name')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Brand must have a Name!')\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each Brand Name must be between 3 and 50 characters'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n \r\nexports.updateBrandValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each Brand Name must be between 3 and 30 characters'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteBrandValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst couponController = require('../controllers/couponController');\r\nconst couponValidator = require('../utilities/validators/couponValidator');\r\nconst authController = require('../controllers/authController');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\r\n\tauthController.protect,\r\n\tauthController.restrictTo('admin', 'manager'),\r\n);\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(couponController.getAllCoupons)\r\n\t.post(\r\n\t\tcouponValidator.createCouponValidator, \r\n\t\tcouponController.createCoupon);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(couponValidator.getCouponValidator, couponController.getCoupon)\r\n\t.patch(couponValidator.updateCouponValidator, couponController.updateCoupon)\r\n\t.delete(couponValidator.deleteCouponValidator, couponController.deleteCoupon);\r\n\r\nmodule.exports = router;\r\n","// const asyncHandler = require('express-async-handler');\r\n\r\nconst Coupon = require('../models/couponModel');\r\nconst factory = require('./handlerFactory');\r\n// const AppError = require('../utilities/appError');\r\n\r\n/**********************************************************************************/\r\n\r\n// @desc\t\tGet All coupons\r\n// @route \tGET  /api/v1/coupons\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.getAllCoupons = factory.getAll(Coupon);\r\n\r\n// @desc\t\tGet a Single Coupon\r\n// @route \tGET  /api/v1/coupons/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.getCoupon = factory.getOne(Coupon);\r\n\r\n// @desc\t\tCreate Coupon\r\n// @route \tPOST  /api/v1/coupons\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.createCoupon = factory.createOne(Coupon);\r\n\r\n// @desc\t\tUpdate Specific Coupon\r\n// @route \tPATCH  /api/v1/coupons/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.updateCoupon = factory.updateOne(Coupon);\r\n\r\n// @desc\t\tDelete Specific Coupon\r\n// @route \tDELETE  /api/v1/coupons/:id\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.deleteCoupon = factory.deleteOne(Coupon);\r\n\r\n// PUT modifies a record's information and creates a new record if one is not available, and PATCH updates a resource without sending the entire body in the request.\r\n// PATCH can save you some bandwidth, as updating a field with PATCH means less data being transferred than sending the whole record with PUT.\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\n\r\n//1- Create Schema\r\nconst couponSchema = new Schema(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Coupon must have a name!'],\r\n\t\t\tunique: true,\r\n\t\t\ttrim: true,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\texpires: {\r\n\t\t\ttype: Date,\r\n\t\t\t// required: [true, `Each Coupon must have an expiration date`],\r\n\t\t\tdefault: Date.now() + 20 * 24 * 60 * 60 * 1000, //20 days from now\r\n\t\t},\r\n\r\n\t\tdiscount: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: [true, `Each Coupon must have a discount percentage`],\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 100,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\ttoJSON: { virtuals: true }, // To include timestamps in the JSON output\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Coupon', couponSchema);\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst Coupon = require('../../models/couponModel');\r\nconst AppError = require('../appError');\r\n\r\nexports.getCouponValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createCouponValidator = [\r\n\tcheck('name')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Coupon must have a Name!')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst coupon = await Coupon.findOne({ name: val });\r\n\t\t\tif (coupon) {\r\n\t\t\t\tthrow new AppError('This Coupon is already in intiated', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('expires')\r\n\t\t.optional()\r\n\t\t.isDate({\r\n\t\t\tformat: 'MM-DD-YYYY',\r\n\t\t\tstrict: true,\r\n\t\t})\r\n\t\t.withMessage(\"Invalid Date format... Try ('MM-DD-YYYY') Format\")\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst expireDate = Date.parse(val);\r\n\t\t\tconst tommorrow = Date.now() + 24 * 60 * 60 * 1000;\r\n\r\n\t\t\tif (expireDate <= tommorrow) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t'The Coupon expiration date must be valid for at least 24 hours',\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('discount')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Coupon must have a discount value between 1 and 100')\r\n\t\t.isNumeric()\r\n\t\t.isLength({ min: 1, max: 100 })\r\n\t\t.withMessage('discount value must be between 1 and 100'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateCouponValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst coupon = await Coupon.findOne({ name: val });\r\n\t\t\tif (coupon) {\r\n\t\t\t\tthrow new AppError('This Coupon is already in intiated', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('expires')\r\n\t\t.optional()\r\n\t\t.isDate({\r\n\t\t\tformat: 'MM-DD-YYYY',\r\n\t\t\tstrict: true,\r\n\t\t})\r\n\t\t.withMessage(\"Invalid Date format... Try ('mm-dd-yyyy') Format\")\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tconst coupon = await Coupon.findById(req.params.id);\r\n\r\n\t\t\tconst expireDate = Date.parse(val);\r\n\t\t\tconst updatedAt = Date.parse(coupon.updatedAt) + 12 * 60 * 60 * 1000;\r\n\t\t\t// const tommorrow = Date.now() + 12 * 60 * 60 * 1000;\r\n\r\n\t\t\tif (expireDate <= updatedAt) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t'The Coupon expiration date must be valid for at least 12 hours of being created or updated',\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// if (expireDate <= tommorrow) {\r\n\t\t\t// \tthrow new AppError(\r\n\t\t\t// \t\t'The Coupon expiration date must be valid for at least another 12 hours',\r\n\t\t\t// \t\t400,\r\n\t\t\t// \t);\r\n\t\t\t// }\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('discount')\r\n\t\t.optional()\r\n\t\t.isNumeric()\r\n\t\t.isLength({ min: 1, max: 100 })\r\n\t\t.withMessage('discount value must be between 1 and 100'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteCouponValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst reviewController = require('../controllers/reviewController');\r\nconst authController = require('../controllers/authController');\r\nconst reviewValidator = require('../utilities/validators/reviewValidator');\r\n\r\n/*******************************************************************************/\r\n\r\n//mergeParams Allow us to access parameeters from other Routers\r\nconst router = express.Router({ mergeParams: true });\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(reviewController.getAllReviews)\r\n\t.post(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('user'),\r\n\t\treviewController.setUserIdAndProductIdToBody('both'),\r\n\t\treviewValidator.createReviewValidator,\r\n\t\treviewController.createReview,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(reviewValidator.getReviewValidator, reviewController.getReview)\r\n\t.patch(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('user'),\r\n\t\treviewValidator.updateReviewValidator,\r\n\t\treviewController.updateReview,\r\n\t)\r\n\t.delete(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'user', 'manager'),\r\n\t\treviewValidator.deleteReviewValidator,\r\n\t\treviewController.deleteReview,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable node/no-unsupported-features/es-syntax */\r\n/* eslint-disable import/no-extraneous-dependencies */\r\n// const AppError = require('../utilities/appError');\r\nconst factory = require('./handlerFactory');\r\nconst Review = require('../models/reviewModel');\r\n/***********************************************************************/\r\n\r\n// @desc\t\tGet All Reviews\r\n// @route \tGET  /api/v1/reviews\r\n// @access\tPublic\r\nexports.getAllReviews = factory.getAll(Review);\r\n\r\n// @desc\t\tGet a Single Review\r\n// @route \tGET  /api/v1/reviews/:id\r\n// @access\tPublic\r\nexports.getReview = factory.getOne(Review);\r\n\r\n//For createReview Nested route\r\nexports.setUserIdAndProductIdToBody = (set) => (req, res, next) => {\r\n\tif (set === 'user') req.body.user = req.body.user || req.user._id;\r\n\r\n\tif (set === 'product')\r\n\t\treq.body.product = req.body.product || req.params.productId;\r\n\r\n\tif (set === 'both') {\r\n\t\treq.body.user = req.body.user || req.user._id;\r\n\t\treq.body.product = req.body.product || req.params.productId;\r\n\t}\r\n\tnext();\r\n};\r\nexports.setproductIdToBody = (req, res, next) => {\r\n\t//Nested Route\r\n\treq.body.product = req.body.product || req.params.productId;\r\n\tnext();\r\n};\r\nexports.setUserIdToBody = (req, res, next) => {\r\n\t//Nested Route\r\n\treq.body.user = req.body.user || req.user._id;\r\n\tnext();\r\n};\r\n\r\n// @desc\t\tCreate Review\r\n// @route \tPOST  /api/v1/reviews\r\n// @access\tPrivate/protect --> (User)\r\nexports.createReview = factory.createOne(Review);\r\n\r\n// @desc\t\tUpdate Specific Review\r\n// @route \tPATCH  /api/v1/reviews/:id\r\n// @access\tPrivate/protect --> (User)\r\nexports.updateReview = factory.updateOne(Review);\r\n\r\n// @desc\t\tDelete Specific Review\r\n// @route \tDELETE  /api/v1/reviews/:id\r\n// @access\tPrivate --> (Admin, User)\r\nexports.deleteReview = factory.deleteOne(Review);\r\n\r\n// PUT modifies a record's information and creates a new record if one is not available, and PATCH updates a resource without sending the entire body in the request.\r\n// PATCH can save you some bandwidth, as updating a field with PATCH means less data being transferred than sending the whole record with PUT.\r\n","const mongoose = require('mongoose');\r\nconst Product = require('./productModel');\r\n\r\nconst { Schema } = mongoose;\r\n\r\n//1- Create Schema\r\nconst reviewSchema = new Schema(\r\n\t{\r\n\t\ttitle: {\r\n\t\t\ttype: String,\r\n\t\t\tminlength: [3, 'Review title must be more than 2 characters!'],\r\n\t\t\tmaxlength: [60, 'Review title must be less than 60 characters!'],\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tratings: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: [true, 'Each Review Must be given a rating value!'],\r\n\t\t\tmin: [1, \"Review rating can't be less than 1\"],\r\n\t\t\tmax: [5, \"Review rating can't be more than 5\"],\r\n\t\t\tdefault: 3.0,\r\n\t\t},\r\n\t\tuser: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'User',\r\n\t\t\trequired: [true, 'Each Review must belong to a User'],\r\n\t\t},\r\n\t\tproduct: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'Product',\r\n\t\t\trequired: [true, 'Each Review must belong to a Product'],\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\ttoJSON: { virtuals: true },\r\n\t\ttoObject: { virtuals: true },\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//DOCUMENT MIDDLEWARE: runs before or after .save() and .create() but not on .insertMany({})\r\nreviewSchema.pre(/^find/, function (next) {\r\n\tthis.populate([\r\n\t\t{\r\n\t\t\tpath: 'user',\r\n\t\t\tselect: 'name',\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tpath: 'product',\r\n\t\t// \tselect: 'title -category -subCategory',\r\n\t\t// },\r\n\t]);\r\n\tthis.find().select('-createdAt -updatedAt');\r\n\tnext();\r\n});\r\n//--------------------------------------------------------------------\r\n//Aggregation\r\nreviewSchema.statics.calcAvgRatingsAndQuantity = async function (productId) {\r\n\tconst stats = await this.aggregate([\r\n\t\t// Stage 1: Get all reviews for a product\r\n\t\t{ $match: { product: productId } },\r\n\r\n\t\t// Stage 2: group by productId and Calculate averageRatings and ratingsQuantity for products\r\n\t\t{\r\n\t\t\t$group: {\r\n\t\t\t\t_id: 'product',\r\n\t\t\t\tavgRatings: { $avg: '$ratings' },\r\n\t\t\t\tratingsQuantity: { $sum: 1 },\r\n\t\t\t},\r\n\t\t},\r\n\t]);\r\n\r\n\tif (stats.length > 0) {\r\n\t\tawait Product.findByIdAndUpdate(productId, {\r\n\t\t\tratingsQuantity: stats[0].ratingsQuantity,\r\n\t\t\tratingsAverage: stats[0].avgRatings,\r\n\t\t});\r\n\t} else {\r\n\t\tawait Product.findByIdAndUpdate(productId, {\r\n\t\t\tratingsQuantity: 0,\r\n\t\t\tratingsAverage: 3,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nreviewSchema.post('save', async function () {\r\n\t//this points to current review..\r\n\tawait this.constructor.calcAvgRatingsAndQuantity(this.product);\r\n});\r\n\r\n// Surprisingly Did not Work\r\n// reviewSchema.post(/^findOneAnd/, async (doc) => {\r\n// \tif (doc) await doc.constructor.calcAvgRatingsAndQuantity(doc.product._id);\r\n// });\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Review', reviewSchema);\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\nconst slugify = require('slugify');\r\n\r\n//1- Create Schema\r\nconst productSchema = new Schema(\r\n\t{\r\n\t\ttitle: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Product must have a Title!'],\r\n\t\t\ttrim: true,\r\n\t\t\tminlength: [5, 'Product Title must be more than 4 characters!'],\r\n\t\t\tmaxlength: [120, 'Product Title must be less than 120 characters!'],\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: String,\r\n\t\t\tlowercase: true,\r\n\t\t},\r\n\t\tdescription: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Product must have a Description!'],\r\n\t\t\tminlength: [20, 'Product Description must be morethan 20 characters!'],\r\n\t\t},\r\n\t\tquantity: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: [true, 'Each Product must have a Quantity!'],\r\n\t\t},\r\n\t\tsold: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tratingsAverage: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3.0,\r\n\t\t\tmin: [1, 'Rating must be a number between 1 and 5!'],\r\n\t\t\tmax: [5, 'Rating must be a number between 1 and 5!'],\r\n\t\t\tset: (val) => val.toFixed(2),\r\n\t\t},\r\n\t\tratingsQuantity: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tprice: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: [true, 'Each Product must have a Price!'],\r\n\t\t\ttrim: true,\r\n\t\t},\r\n\t\tpriceAfterDiscount: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: function () {\r\n\t\t\t\tif (this.price) {\r\n\t\t\t\t\treturn this.price;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\t\t},\r\n\t\tcolors: {\r\n\t\t\ttype: [String],\r\n\t\t},\r\n\t\timages: {\r\n\t\t\ttype: [String],\r\n\t\t},\r\n\t\timageCover: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, 'Each Product must have a Cover Image!'],\r\n\t\t},\r\n\t\tcategory: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'Category',\r\n\t\t\trequired: [true, 'Each Product must belong to a Category!'],\r\n\t\t},\r\n\t\tsubCategory: [\r\n\t\t\t{\r\n\t\t\t\ttype: Schema.ObjectId,\r\n\t\t\t\tref: 'SubCategory',\r\n\t\t\t},\r\n\t\t],\r\n\t\tbrand: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'Brand',\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\ttoJSON: { virtuals: true },\r\n\t\ttoObject: { virtuals: true },\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//DOCUMENT MIDDLEWARE: runs before or after .save() and .create() but not on .insertMany({})\r\nproductSchema.pre('save', function (next) {\r\n\tif (!this.slug) {\r\n\t\tthis.slug = slugify(this.title);\r\n\t}\r\n\tnext();\r\n});\r\n\r\nproductSchema.pre('findOneAndUpdate', async function (next) {\r\n\tconst update = this.getUpdate();\r\n\r\n\t//update slug whenever title is updated\r\n\tif (update.title) {\r\n\t\tupdate.slug = slugify(update.title, { lower: true });\r\n\t}\r\n\r\n\t//update priceAfterDiscount if updated price is smaller than current priceAfterDiscount\r\n\tif (update.priceAfterDiscount) {\r\n\t\tconst product = await this.model.findOne(this.getQuery());\r\n\r\n\t\tif (product && update.priceAfterDiscount > product.price) {\r\n\t\t\tupdate.priceAfterDiscount = product.price;\r\n\t\t}\r\n\t}\r\n\r\n\t//update priceAfterDiscount if updated price is smaller than current priceAfterDiscount\r\n\tif (update.price) {\r\n\t\tconst product = await this.model.findOne(this.getQuery());\r\n\r\n\t\tif (product && product.priceAfterDiscount > update.price) {\r\n\t\t\tupdate.priceAfterDiscount = update.price;\r\n\t\t}\r\n\t}\r\n\r\n\tnext();\r\n});\r\n\r\nproductSchema.pre(/^find/, function (next) {\r\n\tthis.find().select('-createdAt -updatedAt');\r\n\tnext();\r\n});\r\nproductSchema.pre(/^find/, function (next) {\r\n\tthis.populate([\r\n\t\t{\r\n\t\t\tpath: 'category',\r\n\t\t\tselect: 'name',\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: 'subCategory',\r\n\t\t\tselect: 'name',\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: 'brand',\r\n\t\t\tselect: 'name',\r\n\t\t},\r\n\t]);\r\n\tthis.find().select('-createdAt -updatedAt');\r\n\tnext();\r\n});\r\n\r\n// Virtual population for reviews\r\nproductSchema.virtual('reviews', {\r\n\tref: 'Review',\r\n\tforeignField: 'product',\r\n\tlocalField: '_id',\r\n\t// options: { sort: { createdAt: -1 } },\r\n});\r\n\r\n//------------------------------------------------------------------\r\n//Set ImageUrl\r\nconst setImageUrl = function (doc) {\r\n\tif (doc.imageCover) {\r\n\t\tconst imageUrl = `${process.env.BASE_URL}/img/products/${doc.imageCover}`;\r\n\t\tdoc.imageCover = imageUrl;\r\n\t}\r\n\tif (doc.images) {\r\n\t\tdoc.images = doc.images.map(\r\n\t\t\t(image) => `${process.env.BASE_URL}/img/products/${image}`,\r\n\t\t);\r\n\t}\r\n};\r\n\r\n// Adjust ImageURL After Retrieving or Updating a document\r\nproductSchema.post('init', (doc) => setImageUrl(doc));\r\n\r\n// Adjust ImageURL After Creating a document\r\nproductSchema.post('save', (doc) => setImageUrl(doc));\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Product', productSchema);\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst AppError = require('../appError');\r\nconst Review = require('../../models/reviewModel');\r\nconst Product = require('../../models/productModel');\r\n/**********************************************************************/\r\n\r\nexports.getReviewValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst review = await Review.findById(val);\r\n\t\t\tif (!review) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"The Review you're seaching for may be deleted or doesn't exist right now!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createReviewValidator = [\r\n\tcheck('title')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 60 })\r\n\t\t.withMessage('Each Review Title must be between 3 and 60 characters'),\r\n\tcheck('ratings')\r\n\t\t.notEmpty()\r\n\t\t.isNumeric()\r\n\t\t.isFloat({\r\n\t\t\tmin: 1.0,\r\n\t\t\tmax: 5.0,\r\n\t\t})\r\n\t\t.withMessage('Product rating must be between 1.0 and 5.0'),\r\n\tcheck('user')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 1) Check if logged user is the one creating the review\r\n\t\t\tif (req.user._id.toString() !== val.toString()) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t'You cannot create a review for another user!',\r\n\t\t\t\t\t403,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// 2) Check if logged user have already created a review\r\n\t\t\tconst review = await Review.findOne({\r\n\t\t\t\tuser: req.user._id,\r\n\t\t\t\tproduct: req.body.product,\r\n\t\t\t});\r\n\t\t\tif (review) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t'You have already created a review for this product!',\r\n\t\t\t\t\t403,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}),\r\n\tcheck('product')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tconst product = await Product.findById(req.body.product);\r\n\t\t\tif (!product) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"The Product you want to review may be deleted or doesn't exist right now!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateReviewValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 1) Check if review exists\r\n\t\t\tconst review = await Review.findById(val);\r\n\t\t\tif (!review) {\r\n\t\t\t\treturn new AppError(`There's no review with the id: ${val}`, 404);\r\n\t\t\t}\r\n\t\t\t// 2) Check if review belongs to the logged user\r\n\t\t\tif (review.user._id.toString() !== req.user._id.toString()) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t'You are not authorized to update this review!',\r\n\t\t\t\t\t403,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}),\r\n\tcheck('title')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 60 })\r\n\t\t.withMessage('Each Review Name must be between 3 and 60 characters'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteReviewValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tif (req.user.role === 'user') {\r\n\t\t\t\t// 1) Check if review exists\r\n\t\t\t\tconst review = await Review.findById(val);\r\n\t\t\t\tif (!review) {\r\n\t\t\t\t\treturn new AppError(\r\n\t\t\t\t\t\t`There's no review with the id: ${val}`,\r\n\t\t\t\t\t\t404,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 2) Check if review belongs to the logged user\r\n\t\t\t\tif (review.user._id.toString() !== req.user._id.toString()) {\r\n\t\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\t'You are not authorized to delete this review!',\r\n\t\t\t\t\t\t403,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst productController = require('../controllers/productController');\r\nconst authController = require('../controllers/authController');\r\nconst productValidator = require('../utilities/validators/productValidator');\r\nconst reviewRouter = require('./reviewRoutes');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\n//                     <<<< Nested Routes >>>>\r\n//GET      /api/v1/products/:productId/reviews (To get child based on a parent)\r\n//POST     /api/v1/products/:productId/reviews\r\nrouter.use('/:productId/reviews', reviewRouter);\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(productController.getAllProducts)\r\n\t.post(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tproductController.uploadProductImage,\r\n\t\tproductController.resizeProductImage,\r\n\t\tproductValidator.createProductValidator,\r\n\t\tproductController.createProduct,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(productValidator.getProductValidator, productController.getProduct)\r\n\t.patch(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\tproductController.uploadProductImage,\r\n\t\tproductController.resizeProductImage,\r\n\t\tproductValidator.updateProductValidator,\r\n\t\tproductController.updateProduct,\r\n\t)\r\n\t.delete(\r\n\t\tauthController.protect,\r\n\t\tauthController.restrictTo('admin'),\r\n\t\tproductValidator.deleteProductValidator,\r\n\t\tproductController.deleteProduct,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable node/no-unsupported-features/es-syntax */\r\n/* eslint-disable import/no-extraneous-dependencies */\r\n// const multer = require('multer');\r\nconst sharp = require('sharp');\r\nconst asyncHandler = require('express-async-handler');\r\nconst { v4: uuidv4 } = require('uuid');\r\n// const AppError = require('../utilities/appError');\r\nconst factory = require('./handlerFactory');\r\nconst Product = require('../models/productModel');\r\nconst { uploadMultipleImages } = require('../middlewares/uploadImage');\r\n\r\n/**********************************************************************************/\r\n\r\n//upload Multiple Images\r\nexports.uploadProductImage = uploadMultipleImages([\r\n\t{ name: 'imageCover', maxCount: 1 },\r\n\t{ name: 'images', maxCount: 5 },\r\n]);\r\n\r\n//--------------------------------------------------------\r\n\r\n//--imageProcessing applied on the buffer image in memory\r\n//--while if we stored the image directly to diskStorage then sharp middleware function is not needed\r\nexports.resizeProductImage = asyncHandler(async (req, res, next) => {\r\n\tif (!req.files) return next();\r\n\r\n\t// Process imageCover\r\n\tif (req.files.imageCover) {\r\n\t\tconst imageCoverName = `product-${uuidv4()}-${Date.now()}-cover.jpeg`;\r\n\r\n\t\tawait sharp(req.files.imageCover[0].buffer)\r\n\t\t\t.resize(2000, 1333)\r\n\t\t\t.toFormat('jpeg')\r\n\t\t\t.jpeg({ quality: 93 })\r\n\t\t\t.toFile(`public/img/products/${imageCoverName}`);\r\n\r\n\t\t// Save Image to DB\r\n\t\treq.body.imageCover = imageCoverName;\r\n\t}\r\n\r\n\t// Process images\r\n\tif (req.files.images) {\r\n\t\treq.body.images = [];\r\n\r\n\t\tawait Promise.all(\r\n\t\t\treq.files.images.map(async (image) => {\r\n\t\t\t\tconst ImageName = `product-${uuidv4()}-${Date.now()}.jpeg`;\r\n\r\n\t\t\t\tawait sharp(image.buffer)\r\n\t\t\t\t\t.resize(800, 800)\r\n\t\t\t\t\t.toFormat('jpeg')\r\n\t\t\t\t\t.jpeg({ quality: 90 })\r\n\t\t\t\t\t.toFile(`public/img/products/${ImageName}`);\r\n\r\n\t\t\t\treq.body.images.push(ImageName);\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n\tnext();\r\n});\r\n\r\n/**********************************************************************************/\r\n\r\n// @desc\t\tGet All Products\r\n// @route \tGET  /api/v1/products\r\n// @access\tPublic\r\nexports.getAllProducts = factory.getAll(Product);\r\n\r\n// @desc\t\tGet a Single Product\r\n// @route \tGET  /api/v1/products/:id\r\n// @access\tPublic\r\nexports.getProduct = factory.getOne(Product, { path: 'reviews' });\r\n\r\n// @desc\t\tCreate Product\r\n// @route \tPOST  /api/v1/products\r\n// @access\tPrivate/protect --> (Admin, Manager)\r\nexports.createProduct = factory.createOne(Product);\r\n\r\n// @desc\t\tUpdate Specific Product\r\n// @route \tPATCH  /api/v1/products/:id\r\n// @access\tPrivate/protect --> (Admin, Manager)\r\nexports.updateProduct = factory.updateOne(Product);\r\n\r\n// @desc\t\tDelete Specific Product\r\n// @route \tDELETE  /api/v1/products/:id\r\n// @access\tPrivate/protect --> (Admin, Manager)\r\nexports.deleteProduct = factory.deleteOne(Product);\r\n\r\n// PUT modifies a record's information and creates a new record if one is not available, and PATCH updates a resource without sending the entire body in the request.\r\n// PATCH can save you some bandwidth, as updating a field with PATCH means less data being transferred than sending the whole record with PUT.\r\n","const { check } = require('express-validator');\r\nconst Category = require('../../models/categoryModel');\r\nconst Product = require('../../models/productModel');\r\nconst SubCategory = require('../../models/subCategoryModel');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst AppError = require('../appError');\r\n\r\n/*************************************************************************/\r\n\r\nexports.getProductValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst product = await Product.findById(val);\r\n\t\t\tif (!product) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"The Product you're seaching for may be deleted or doesn't exist right now!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createProductValidator = [\r\n\tcheck('title')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must have a title!')\r\n\t\t.isLength({ min: 5, max: 120 })\r\n\t\t.withMessage('Each Product Title must be between 5 and 120 characters'),\r\n\tcheck('description')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must have a description!')\r\n\t\t.isLength({ min: 20 })\r\n\t\t.withMessage('Product description must be morethan 20 characters'),\r\n\tcheck('quantity')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must have a quantity!')\r\n\t\t.isNumeric()\r\n\t\t.withMessage('Product quantity must be a Number'),\r\n\tcheck('sold')\r\n\t\t.optional()\r\n\t\t.isNumeric()\r\n\t\t.withMessage('Sold Products must be saved in a Number'),\r\n\tcheck('price')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must have a Price!')\r\n\t\t.isNumeric()\r\n\t\t.withMessage('Product Price must be a Number!'),\r\n\tcheck('priceAfterDiscount')\r\n\t\t.optional()\r\n\t\t.isNumeric()\r\n\t\t.withMessage('Product Price must be a Number!')\r\n\t\t.isFloat()\r\n\t\t.custom((value, { req }) => {\r\n\t\t\tif (value > req.body.price) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Price after discount can't be greater than the original price\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('ratingsAverage')\r\n\t\t.optional()\r\n\t\t.isNumeric()\r\n\t\t//new\r\n\t\t.isFloat()\r\n\t\t.withMessage('ratingsAverage must be a Number!')\r\n\t\t.isLength({ min: 1, max: 5 })\r\n\t\t.withMessage('Product Rating must be between 1.0 and 5.0'),\r\n\tcheck('ratingsQuantity')\r\n\t\t.optional()\r\n\t\t.isNumeric()\r\n\t\t.withMessage('ratingsQuantity must be a Number!'),\r\n\tcheck('colors')\r\n\t\t.optional()\r\n\t\t.isArray()\r\n\t\t.withMessage('Product colors should be an array of strings!'),\r\n\tcheck('imageCover')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must have a cover Image!'),\r\n\tcheck('images')\r\n\t\t.optional()\r\n\t\t.isArray()\r\n\t\t.withMessage('images should be an array of strings!'),\r\n\tcheck('category')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each Product must belong to a specific category')\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!')\r\n\t\t.custom(async (categoryId, { req }) => {\r\n\t\t\t//Check if categoryId already exists\r\n\t\t\tconst categoryExist = await Category.findById(categoryId);\r\n\t\t\tif (!categoryExist) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`No Category found with the id: ${categoryId} 😕`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('subCategory')\r\n\t\t.optional()\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (subCatIds, { req }) => {\r\n\t\t\t//Check if subcategoryId already exists\r\n\t\t\tconst subNotExist = (\r\n\t\t\t\tawait Promise.all(\r\n\t\t\t\t\tsubCatIds.map(async (id) => {\r\n\t\t\t\t\t\tconst subCategory = await SubCategory.findById(id);\r\n\t\t\t\t\t\tif (!subCategory) {\r\n\t\t\t\t\t\t\treturn id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t)\r\n\t\t\t).filter((id) => id !== undefined);\r\n\t\t\tif (subNotExist.length > 0) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`No Sub-Category found with the id(s): ${subNotExist.join(', ')} 😕`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\t.custom(async (InputsubCatIds, { req }) => {\r\n\t\t\t//Get all subcategoryIds in the given category id in the product schema\r\n\t\t\tconst subCatDocs = await SubCategory.find({\r\n\t\t\t\tcategory: req.body.category,\r\n\t\t\t});\r\n\t\t\t// Map all category's subCategories ids to an array\r\n\t\t\tconst orgSubCatIds = subCatDocs.map((val) => val.id);\r\n\r\n\t\t\t// Check if all InputsubCatIds exist in orgCategoryIds\r\n\t\t\tconst allExist = InputsubCatIds.every((id) =>\r\n\t\t\t\torgSubCatIds.includes(id),\r\n\t\t\t);\r\n\r\n\t\t\t// Throw error if any of InputsubCatIds doesnot belong to the category's subcategories\r\n\t\t\tif (!allExist) {\r\n\t\t\t\tconst falsyIds = InputsubCatIds.filter(\r\n\t\t\t\t\t(id) => !orgSubCatIds.includes(id),\r\n\t\t\t\t);\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`The following Sub-Category IDs: [${falsyIds.join(', ')}] ---> don't exist in Category: \"${req.body.category}\" 😕`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('brand')\r\n\t\t.optional()\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!'),\r\n\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateProductValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst product = await Product.findById(val);\r\n\t\t\tif (!product) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"The Product you're seaching for may be deleted or doesn't exist right now!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteProductValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage(`Invalid Object ID format!`)\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst product = await Product.findById(val);\r\n\t\t\tif (!product) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"The Product you're seaching for may be deleted or doesn't exist right now!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst userController = require('../controllers/userController');\r\nconst authController = require('../controllers/authController');\r\nconst userValidator = require('../utilities/validators/userValidator');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\n// 1) Only logged in users can access these routes\r\n/*---------------*/ router.use(authController.protect); /*---------------*/\r\n\r\nrouter.get('/getMe', userController.getMe, userController.getUser);\r\nrouter.patch(\r\n\t'/updateMyPassword',\r\n\tuserValidator.updateMyPasswordValidator,\r\n\tuserController.updateMyPassword,\r\n);\r\nrouter.patch(\r\n\t'/updateMe',\r\n\tuserController.uploadUserImage,\r\n\tuserController.resizeUserImage,\r\n\tuserValidator.updateMeValidator,\r\n\tuserController.updateMe,\r\n);\r\n\r\nrouter.delete('/deleteMe', userController.deleteMe);\r\n\r\n//------------------------------------------------------------------------\r\n\r\n// 2) Only admins and managers roles can access these routes\r\n/*------*/ router.use(authController.restrictTo('admin', 'manager')); /*------*/\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(userController.getAllUsers)\r\n\t.post(\r\n\t\tuserController.uploadUserImage,\r\n\t\tuserController.resizeUserImage,\r\n\t\tuserValidator.createUserValidator,\r\n\t\tuserController.createUser,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.get(userValidator.getUserValidator, userController.getUser)\r\n\t.patch(\r\n\t\tuserController.uploadUserImage,\r\n\t\tuserController.resizeUserImage,\r\n\t\tuserValidator.updateUserValidator,\r\n\t\tuserController.updateUser,\r\n\t)\r\n\t.delete(userValidator.deleteUserValidator, userController.deleteUser);\r\n\r\nrouter.patch(\r\n\t'/updateUserPassword/:id',\r\n\tuserValidator.updateUserPasswordValidator,\r\n\tuserController.updateUserPassword,\r\n);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable node/no-unsupported-features/es-syntax */\r\n/* eslint-disable import/no-extraneous-dependencies */\r\nconst sharp = require('sharp');\r\nconst asyncHandler = require('express-async-handler');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst factory = require('./handlerFactory');\r\nconst { uploadSingleImage } = require('../middlewares/uploadImage');\r\nconst User = require('../models/userModel');\r\nconst AppError = require('../utilities/appError');\r\nconst createToken = require('../utilities/createToken');\r\n\r\n/**********************************************************************************/\r\n\r\n//upload Single Image\r\nexports.uploadUserImage = uploadSingleImage('profilePicture');\r\n\r\n//--------------------------------------------------------\r\n\r\n//--imageProcessing applied on the buffer image in memory\r\n//--while if we stored the image directly to diskStorage then sharp middleware function is not needed\r\nexports.resizeUserImage = asyncHandler(async (req, res, next) => {\r\n\tif (!req.file) return next();\r\n\r\n\treq.file.filename = `user-${uuidv4()}-${Date.now()}.jpeg`;\r\n\r\n\tawait sharp(req.file.buffer)\r\n\t\t.resize(600, 600)\r\n\t\t.toFormat('jpeg')\r\n\t\t.jpeg({ quality: 98 })\r\n\t\t.toFile(`public/img/users/${req.file.filename}`);\r\n\r\n\t// Save Image to DB\r\n\treq.body.profilePicture = req.file.filename;\r\n\r\n\tnext();\r\n});\r\n\r\n/**********************************************************************************/\r\n// 1) Helper functions\r\nconst filterObj = (obj, ...allowedFields) => {\r\n\tconst newObj = {};\r\n\tObject.keys(obj).forEach((el) => {\r\n\t\tif (allowedFields.includes(el)) newObj[el] = obj[el];\r\n\t});\r\n\treturn newObj;\r\n};\r\n//-----------------------------------------------------------------\r\n\r\n// 2) Routes for User managing Himself\r\n// لما ربنا يفرجها و نعمل تسجيل دخول و الحاجات دي\r\n// exports.updateMe = asyncHandler(async (req, res, next) => {\r\n// \tconst inputData = Object.keys(req.body).join(' ').toLowerCase();\r\n\r\n// \t// 1) Create error if user Post Password data\r\n// \tif (/password/.test(inputData)) {\r\n// \t\treturn next(\r\n// \t\t\tnew AppError(\r\n// \t\t\t\t'This route is not for password update, please use /updatePassword',\r\n// \t\t\t\t403,\r\n// \t\t\t),\r\n// \t\t);\r\n// \t}\r\n// \t//2) Filter unwanted fields names that are not allowed to be updated\r\n// \tconst filteredData = filterObj(req.body, 'name', 'email', 'phone', 'role');\r\n// \tif (req.file) filteredData.photo = req.file.filename;\r\n\r\n// \t// 3) Update user document\r\n// \tconst updatedUser = await User.findByIdAndUpdate(\r\n// \t\treq.params.id,\r\n// \t\tfilteredData,\r\n// \t\t{\r\n// \t\t\tnew: true,\r\n// \t\t\trunValidators: true,\r\n// \t\t},\r\n// \t);\r\n\r\n// \tif (!updatedUser) {\r\n// \t\treturn next(\r\n// \t\t\tnew AppError(`No User found with the id:${req.params.id}!😞`, 404),\r\n// \t\t);\r\n// \t}\r\n\r\n// \tres.status(200).json({\r\n// \t\tstatus: 'success',\r\n// \t\tdata: { user: updatedUser },\r\n// \t});\r\n// });\r\n\r\n// لما ربنا يفرجها و نعمل تسجيل دخول و الحاجات دي\r\n// exports.updatePassword = asyncHandler(async (req, res, next) => {\r\n// \t//1) Get the user from collection\r\n// \tconst user = await User.findById(req.params.id).select('+password');\r\n// \tif (!user) return next(new AppError('No user found with this ID!😞', 404));\r\n\r\n// \t//2) Check if posted current password is correct\r\n// \tif (\r\n// \t\t!req.body.currentPassword ||\r\n// \t\t!(await user.correctPassword(req.body.currentPassword, user.password))\r\n// \t) {\r\n// \t\treturn next(new AppError('Please enter a valid current password', 400));\r\n// \t}\r\n\r\n// \t//3) check if newPassword and passwordConfirm are available\r\n// \tif (!req.body.newPassword || !req.body.confirmNewPassword) {\r\n// \t\treturn next(\r\n// \t\t\tnew AppError('Please enter a valid password and confirm it', 400),\r\n// \t\t);\r\n// \t}\r\n\r\n// \t//4) check if password is equal to passwordConfirm\r\n// \tif (req.body.newPassword !== req.body.confirmNewPassword) {\r\n// \t\treturn next(new AppError('New Passwords do not match', 400));\r\n// \t}\r\n\r\n// \tconst updatedUser = await User.findByIdAndUpdate(req.params.id, {\r\n// \t\tpassword: await bcrypt.hash(req.body.newPassword, 12),\r\n// \t\tpasswordConfirm: undefined,\r\n// \t});\r\n\r\n// \tres.status(200).json({\r\n// \t\tstatus: 'success',\r\n// \t\tdata: { user: updatedUser },\r\n// \t});\r\n// \t// await updatedUser.save();\r\n// });\r\n\r\nexports.updateUserPassword = asyncHandler(async (req, res, next) => {\r\n\tconst doc = await User.findByIdAndUpdate(\r\n\t\treq.params.id,\r\n\t\t{\r\n\t\t\tpassword: await bcrypt.hash(req.body.newPassword, 12),\r\n\t\t\tpasswordConfirm: undefined,\r\n\t\t\tpasswordChangedAt: Date.now(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\r\n\tif (!doc) return next(new AppError('No user found with this ID!', 404));\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tdata: { user: doc },\r\n\t});\r\n});\r\n/**********************************************************************************/\r\n\r\n// @desc\t\tGet All users\r\n// @route \tGET  /api/v1/users\r\n// @access\tPrivate --> (Admin, Manager)\r\nexports.getAllUsers = factory.getAll(User);\r\n\r\n// @desc\t\tGet a Single User\r\n// @route \tGET  /api/v1/users/:id\r\n// @access\tPrivate --> (Admin)\r\nexports.getUser = factory.getOne(User);\r\n\r\n// @desc\t\tCreate User\r\n// @route \tPOST  /api/v1/users\r\n// @access\tPrivate --> (Admin)\r\n// exports.createUser = factory.createOne(User);\r\nexports.createUser = (req, res) => {\r\n\tres.status(500).json({\r\n\t\tstatus: 'error',\r\n\t\tmessage: 'This route is Not defined... Please, use /signup route instead',\r\n\t});\r\n};\r\n\r\n// @desc\t\tUpdate Specific User\t\t\t//Don't Change Password with this route\r\n// @route \tPATCH  /api/v1/users/:id\r\n// @access\tPrivate --> (Admin)\r\nexports.updateUser = asyncHandler(async (req, res, next) => {\r\n\tconst inputData = Object.keys(req.body).join(' ').toLowerCase();\r\n\r\n\t// 1) Create error if user Post Password data\r\n\tif (/password/.test(inputData)) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t'This route is not for password update, please use /updatePassword',\r\n\t\t\t\t403,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\t//2) Filter unwanted fields names that are not allowed to be updated\r\n\tconst filteredData = filterObj(req.body, 'name', 'email', 'phone', 'role');\r\n\tif (req.file) filteredData.profilePicture = req.file.filename;\r\n\r\n\t// 3) Update user document\r\n\tconst updatedUser = await User.findByIdAndUpdate(\r\n\t\treq.params.id,\r\n\t\tfilteredData,\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\r\n\tif (!updatedUser) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.params.id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tdata: { user: updatedUser },\r\n\t});\r\n});\r\n\r\n// @desc\t\tDelete Specific User\r\n// @route \tDELETE  /api/v1/users/:id\r\n// @access\tPrivate --> (Admin)\r\nexports.deleteUser = factory.deleteOne(User);\r\n\r\n//----------------------------------------------------------------\r\n// ( USER MANAGMENT ROUTES )\r\n\r\n// @desc\t\tGet logged user data\r\n// @route \tGET  /api/v1/users/getMe\r\n// @access\tPrivate/protect --> (logged in user)\r\nexports.getMe = asyncHandler(async (req, res, next) => {\r\n\treq.params.id = req.user._id;\r\n\tnext();\r\n});\r\n\r\n// @desc\t\tUpdate logged user Password\r\n// @route \tPATCH  /api/v1/users/updateMyPassword\r\n// @access\tPrivate/protect --> (logged in user)\r\nexports.updateMyPassword = asyncHandler(async (req, res, next) => {\r\n\t// 1) Update User Password based on payload (req.user._id)\r\n\treq.params.id = req.user._id;\r\n\r\n\tconst user = await User.findByIdAndUpdate(\r\n\t\treq.params.id,\r\n\t\t{\r\n\t\t\tpassword: await bcrypt.hash(req.body.newPassword, 12),\r\n\t\t\tpasswordConfirm: undefined,\r\n\t\t\tpasswordChangedAt: Date.now(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\r\n\tif (!user) return next(new AppError('No user found with this ID!', 404));\r\n\r\n\tconst token = createToken(user._id);\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\ttoken,\r\n\t\tdata: { user },\r\n\t});\r\n\tnext();\r\n});\r\n\r\n// @desc\t\tUpdate logged user data (except: password vars, role)\r\n// @route \tPATCH  /api/v1/users/updateMe\r\n// @access\tPrivate/protect --> (logged in user)\r\nexports.updateMe = asyncHandler(async (req, res, next) => {\r\n\t// // 1) Update User Data based on payload (req.user._id)\r\n\treq.params.id = req.user._id;\r\n\r\n\t//--> get feilds user want to update\r\n\tconst inputData = Object.keys(req.body).join(' ').toLowerCase();\r\n\r\n\t// 2) Create error if user sent Password data\r\n\tif (/password/.test(inputData)) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t'This route is not for password update, please use /updateMyPassword route instead.',\r\n\t\t\t\t403,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\r\n\t// 3) Filter unwanted fields names that are not allowed to be updated\r\n\t// const filteredData = filterObj(req.body, 'name', 'email', 'phone');\r\n\t// if (req.file) filteredData.profilePicture = req.file.filename;\r\n\r\n\t// 4) Update user document\r\n\tconst updatedUser = await User.findByIdAndUpdate(\r\n\t\treq.params.id,\r\n\t\t// req.user._id,\r\n\t\t{\r\n\t\t\tname: req.body.name,\r\n\t\t\temail: req.body.email,\r\n\t\t\tphone: req.body.phone,\r\n\t\t\tprofilePicture: req.file ? req.file.filename : req.body.profilePicture,\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\r\n\tif (!updatedUser) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.params.id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'User is updated successfully!',\r\n\t\tdata: { user: updatedUser },\r\n\t});\r\n\r\n\tnext();\r\n});\r\n\r\n// @desc\t\tDeactivate logged user\r\n// @route \tDELETE  /api/v1/users/deleteMe\r\n// @access\tPrivate/protect --> (logged in user)\r\nexports.deleteMe = asyncHandler(async (req, res, next) => {\r\n\t// 1) Update User based on payload (req.user._id) to be deactive\r\n\tawait User.findByIdAndUpdate(\r\n\t\treq.user._id,\r\n\t\t{ active: false },\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\r\n\tres.status(204).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'User is Deleted successfully!',\r\n\t});\r\n\tnext();\r\n});\r\n\r\n// PUT modifies a record's information and creates a new record if one is not available, and PATCH updates a resource without sending the entire body in the request.\r\n// PATCH can save you some bandwidth, as updating a field with PATCH means less data being transferred than sending the whole record with PUT.\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst { check, body } = require('express-validator');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst User = require('../../models/userModel');\r\nconst AppError = require('../appError');\r\n\r\n/**************************************************************************/\r\nexports.getUserValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.createUserValidator = [\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each User Name must be between 3 and 30 characters')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst user = await User.findOne({ email: val });\r\n\t\t\tif (user) {\r\n\t\t\t\tthrow new AppError('This Email Address is already in use', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('email')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each User must have an Email!')\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst user = await User.findOne({ email: val });\r\n\t\t\tif (user) {\r\n\t\t\t\tthrow new AppError('This Email Address is already in use', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('password')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each User must have a Strong Password!')\r\n\t\t.isLength({ min: 8, max: 30 })\r\n\t\t.withMessage('Each User Name must be between 3 and 30 characters'),\r\n\tcheck('passwordConfirm')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You need to confirm your password!')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tif (val !== req.body.password) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Password and PasswordConfirm don't match!\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('phone')\r\n\t\t.optional()\r\n\t\t.isMobilePhone(['ar-EG', 'en-US'])\r\n\t\t.withMessage('Please enter a valid phone number on the Egyptian format'),\r\n\tcheck('profilePicture').optional(),\r\n\tcheck('role').optional(),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateUserValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each User Name must be between 3 and 50 characters'),\r\n\tcheck('email')\r\n\t\t.optional()\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst user = await User.findOne({ email: val });\r\n\t\t\tif (user) {\r\n\t\t\t\tthrow new AppError('This Email Address is already in use', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('phone')\r\n\t\t.optional()\r\n\t\t.isMobilePhone(['ar-EG', 'en-US'])\r\n\t\t.withMessage('Please enter a valid phone number on the Egyptian format'),\r\n\tcheck('profilePicture').optional(),\r\n\tcheck('role').optional(),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateMeValidator = [\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each User Name must be between 3 and 50 characters'),\r\n\tcheck('email')\r\n\t\t.optional()\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst user = await User.findOne({ email: val });\r\n\t\t\tif (user) {\r\n\t\t\t\tthrow new AppError('This Email Address is already in use', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('phone')\r\n\t\t.optional()\r\n\t\t.isMobilePhone(['ar-EG', 'en-US'])\r\n\t\t.withMessage('Please enter a valid phone number on the Egyptian format'),\r\n\tcheck('profilePicture').optional(),\r\n\tcheck('role').optional(),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateUserPasswordValidator = [\r\n\tcheck('id').optional().isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tbody('currentPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your current password')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 1) verify current password\r\n\t\t\tconst user = await User.findById(req.params.id);\r\n\t\t\tif (!user) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`No user found with this ID: ${req.params.id}!`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tconst IsCorrectPassword = await bcrypt.compare(val, user.password);\r\n\r\n\t\t\tif (!IsCorrectPassword) {\r\n\t\t\t\tthrow new AppError('Incorrect current password!', 401);\r\n\t\t\t}\r\n\t\t}),\r\n\tbody('newPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your new password')\r\n\t\t.isLength({ min: 8, max: 70 })\r\n\t\t.withMessage('Your password has to be at least 8 characters long'),\r\n\tbody('confirmNewPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your new password confirmation')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 2) verify that new password and confirm password match\r\n\t\t\tif (val !== req.body.newPassword) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"New Password and Password Confirmation don't match!\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.updateMyPasswordValidator = [\r\n\tbody('currentPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your current password')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 1) verify current password\r\n\t\t\tconst user = await User.findById(req.user._id);\r\n\t\t\tif (!user) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t`No user found with this ID: ${req.user._id}!`,\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tconst IsCorrectPassword = await bcrypt.compare(val, user.password);\r\n\r\n\t\t\tif (!IsCorrectPassword) {\r\n\t\t\t\tthrow new AppError('Incorrect current password!', 401);\r\n\t\t\t}\r\n\t\t}),\r\n\tbody('newPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your new password')\r\n\t\t.isLength({ min: 8, max: 70 })\r\n\t\t.withMessage('Your password has to be at least 8 characters long'),\r\n\tbody('confirmNewPassword')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You must provide your new password confirmation')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\t// 2) verify that new password and confirm password match\r\n\t\t\tif (val !== req.body.newPassword) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"New Password and Password Confirmation don't match!\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.deleteUserValidator = [\r\n\tcheck('id').isMongoId().withMessage(`Invalid Object ID format!`),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst authController = require('../controllers/authController');\r\nconst authValidator = require('../utilities/validators/authValidator');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/signup', authValidator.signupValidator, authController.signup);\r\nrouter.post('/login', authValidator.loginValidator, authController.login);\r\nrouter.post('/forgotPassword', authController.forgotPassword);\r\nrouter.post('/verifyResetCode', authController.verifyResetCode);\r\nrouter.patch(\r\n\t'/resetPassword',\r\n\tauthValidator.resetPasswordValidator,\r\n\tauthController.resetPassword,\r\n);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable import/no-extraneous-dependencies */\r\nconst { check } = require('express-validator');\r\n\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst User = require('../../models/userModel');\r\nconst AppError = require('../appError');\r\n\r\n/**************************************************************************/\r\n\r\nexports.signupValidator = [\r\n\tcheck('name')\r\n\t\t.optional()\r\n\t\t.isLength({ min: 3, max: 50 })\r\n\t\t.withMessage('Each User Name must be between 3 and 30 characters')\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst user = await User.findOne({ email: val });\r\n\t\t\tif (user) {\r\n\t\t\t\tthrow new AppError('This Email Address is already in use', 400);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('email')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each User must have an Email!')\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!'),\r\n\tcheck('password')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each User must have a Strong Password!')\r\n\t\t.isLength({ min: 8, max: 30 })\r\n\t\t.withMessage('Your Password must be at least 8 characters'),\r\n\tcheck('passwordConfirm')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You need to confirm your password!')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tif (val !== req.body.password) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Password and PasswordConfirm don't match!\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tcheck('phone')\r\n\t\t.optional()\r\n\t\t.isMobilePhone(['ar-EG', 'en-US'])\r\n\t\t.withMessage('Please enter a valid phone number on the Egyptian format'),\r\n\tcheck('profilePicture').optional(),\r\n\tcheck('role').optional(),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.loginValidator = [\r\n\tcheck('email')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Please Enter a valid email')\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!'),\r\n\tcheck('password').notEmpty().withMessage('Please Enter a valid password'),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.resetPasswordValidator = [\r\n\tcheck('email')\r\n\t\t.notEmpty()\r\n\t\t.withMessage(\"you've to enter your email!\")\r\n\t\t.isEmail()\r\n\t\t.withMessage('Invalid Email address format!'),\r\n\tcheck('password')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('Each User must have a Strong Password!')\r\n\t\t.isLength({ min: 8, max: 30 })\r\n\t\t.withMessage('Your Password must be at least 8 characters'),\r\n\tcheck('passwordConfirm')\r\n\t\t.notEmpty()\r\n\t\t.withMessage('You need to confirm your password!')\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tif (val !== req.body.password) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Password and PasswordConfirm don't match!\",\r\n\t\t\t\t\t400,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst wishlistController = require('../controllers/wishlistController');\r\nconst authController = require('../controllers/authController');\r\nconst wishlistValidator = require('../utilities/validators/wishlistValidator');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\n// Apply middleware to protect all routes\r\nrouter.use(authController.protect, authController.restrictTo('user'));\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(wishlistController.getloggedUserWishlist)\r\n\t.post(\r\n\t\twishlistValidator.addToWishlistValidator,\r\n\t\twishlistController.addProductToWishlist,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:productId')\r\n\t.delete(\r\n\t\twishlistValidator.removeFromWishlistValidator,\r\n\t\twishlistController.removeProductFromWishlist,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","const asyncHandler = require('express-async-handler');\r\n\r\nconst User = require('../models/userModel');\r\nconst AppError = require('../utilities/appError');\r\n\r\n/************************************************************************/\r\n\r\n// @desc\t\tGet Products in wishlist\r\n// @route \tGET  /api/v1/whishlist\r\n// @access\tPrivate --> (User)\r\nexports.getloggedUserWishlist = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findById(req.user._id).populate(\r\n\t\t'wishlist',\r\n\t\t'title ratingsAverage price imageCover',\r\n\t);\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\twishlist: user.wishlist,\r\n\t});\r\n});\r\n\r\n// @desc\t\tAdd Product to wishlist\r\n// @route \tPOST  /api/v1/whishlist\r\n// @access\tPrivate --> (User)\r\nexports.addProductToWishlist = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findByIdAndUpdate(\r\n\t\treq.user._id,\r\n\t\t{\r\n\t\t\t// $addToSet ==> adds productId to wishlist array if productId doesn't exist\r\n\t\t\t$addToSet: { wishlist: req.body.productId },\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\tres.status(201).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Product was successfully added to your wishlist',\r\n\t\tdata: { wishlist: user.wishlist },\r\n\t});\r\n});\r\n\r\n// @desc\t\tRemove Product from wishlist\r\n// @route \tDELETE  /api/v1/whishlist/:productId\r\n// @access\tPrivate --> (User)\r\nexports.removeProductFromWishlist = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findByIdAndUpdate(\r\n\t\treq.user._id,\r\n\t\t{\r\n\t\t\t// $pull ==> removes productId from wishlist array if productId exists\r\n\t\t\t$pull: { wishlist: req.params.productId },\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Product was successfully removed from your wishlist',\r\n\t\tdata: { wishlist: user.wishlist },\r\n\t});\r\n});\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst Product = require('../../models/productModel');\r\nconst AppError = require('../appError');\r\nconst User = require('../../models/userModel');\r\n/***********************************************************************/\r\n\r\nexports.addToWishlistValidator = [\r\n\tcheck('productId')\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!')\r\n\t\t.notEmpty()\r\n\t\t.withMessage(\r\n\t\t\t'please provide valid product ID to be added to the wishlist',\r\n\t\t)\r\n\t\t.custom(async (val) => {\r\n\t\t\tconst product = await Product.findById(val);\r\n\t\t\tif (!product) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Product you're trying to add to the wishlist, doesn't exist!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n\r\nexports.removeFromWishlistValidator = [\r\n\tcheck('productId')\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!')\r\n\t\t.notEmpty()\r\n\t\t.withMessage(\r\n\t\t\t'please provide valid product ID to be removed from your wishlist',\r\n\t\t)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tconst user = await User.findById(req.user._id);\r\n\r\n\t\t\tif (!user.wishlist.includes(val.toString())) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Product you're trying to remove from the wishlist, doesn't exist in your wishlist!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst addressController = require('../controllers/addressController');\r\nconst authController = require('../controllers/authController');\r\nconst addressValidator = require('../utilities/validators/addressValidator');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\n// Apply middleware to protect all routes\r\nrouter.use(authController.protect, authController.restrictTo('user'));\r\n\r\nrouter.route('/').get(addressController.getUserAddresses).post(\r\n\t// addressValidator.addToWishlistValidator,\r\n\taddressController.addAddress,\r\n);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.delete(\r\n\t\taddressValidator.removeAddressValidator,\r\n\t\taddressController.removeAddress,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","const asyncHandler = require('express-async-handler');\r\n\r\nconst User = require('../models/userModel');\r\nconst AppError = require('../utilities/appError');\r\n\r\n/************************************************************************/\r\n\r\n// @desc\t\tGet Address for a specific user\r\n// @route \tGET  /api/v1/address\r\n// @access\tPrivate --> (User)\r\nexports.getUserAddresses = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findById(req.user._id).populate('address');\r\n\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\taddress: user.address,\r\n\t});\r\n});\r\n\r\n// @desc\t\tAdd Address to user addresses list\r\n// @route \tPOST  /api/v1/address\r\n// @access\tPrivate --> (User)\r\nexports.addAddress = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findByIdAndUpdate(\r\n\t\treq.user._id,\r\n\t\t{\r\n\t\t\t// $addToSet ==> adds address object to addresses array\r\n\t\t\t$addToSet: { address: req.body },\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\trunValidators: true,\r\n\t\t},\r\n\t);\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\tres.status(201).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Address was successfully added to your Addresses list',\r\n\t\tdata: { address: user.address.at(-1) },\r\n\t});\r\n});\r\n\r\n// @desc\t\tRemove address from addresses array\r\n// @route \tDELETE  /api/v1/address/:id\r\n// @access\tPrivate --> (User)\r\nexports.removeAddress = asyncHandler(async (req, res, next) => {\r\n\tconst user = await User.findByIdAndUpdate(\r\n\t\treq.user._id,\r\n\t\t{\r\n\t\t\t// $pull ==> removes address from addresses array\r\n\t\t\t$pull: { Address: req.params.id },\r\n\t\t},\r\n\t\t{\r\n\t\t\tnew: true,\r\n\t\t\t// runValidators: true,\r\n\t\t},\r\n\t);\r\n\tif (!user) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No User found with the id:${req.user._id}!😞`, 404),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Address was successfully removed from your Addresses list.',\r\n\t\tdata: { address: user.address },\r\n\t});\r\n});\r\n","const { check } = require('express-validator');\r\nconst validatorMiddleware = require('../../middlewares/validatorMiddleware');\r\nconst AppError = require('../appError');\r\nconst User = require('../../models/userModel');\r\n/**************************************************************************/\r\n\r\n//\t--- TO DO List ---\r\n// exports.addAddressValidator = [\r\n// \tcheck('productId')\r\n// \t\t.isMongoId()\r\n// \t\t.withMessage('Invalid Object ID format!')\r\n// \t\t.notEmpty()\r\n// \t\t.withMessage(\r\n// \t\t\t'please provide valid product ID to be added to the wishlist',\r\n// \t\t)\r\n// \t\t.custom(async (val) => {\r\n// \t\t\tconst product = await Product.findById(val);\r\n// \t\t\tif (!product) {\r\n// \t\t\t\tthrow new AppError(\r\n// \t\t\t\t\t\"Product you're trying to add to the wishlist, doesn't exist!\",\r\n// \t\t\t\t\t404,\r\n// \t\t\t\t);\r\n// \t\t\t}\r\n// \t\t\treturn true;\r\n// \t\t}),\r\n// \tvalidatorMiddleware.validationMiddleware,\r\n// ];\r\n\r\nexports.removeAddressValidator = [\r\n\tcheck('id')\r\n\t\t.isMongoId()\r\n\t\t.withMessage('Invalid Object ID format!')\r\n\t\t.notEmpty()\r\n\t\t.withMessage(\r\n\t\t\t'please provide a valid address ID to be removed from your addresses list',\r\n\t\t)\r\n\t\t.custom(async (val, { req }) => {\r\n\t\t\tconst user = await User.findById(req.user._id);\r\n\r\n\t\t\tconst addressesIds = user.address.map((address) =>\r\n\t\t\t\taddress._id.toString(),\r\n\t\t\t);\r\n\t\t\tif (!addressesIds.includes(val.toString())) {\r\n\t\t\t\tthrow new AppError(\r\n\t\t\t\t\t\"Address you're trying to remove from the Addresses list, doesn't exist!\",\r\n\t\t\t\t\t404,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}),\r\n\tvalidatorMiddleware.validationMiddleware,\r\n];\r\n","const express = require('express');\r\nconst cartController = require('../controllers/cartController');\r\n// const cartValidator = require('../utilities/validators/cartValidator');\r\nconst authController = require('../controllers/authController');\r\n\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(authController.protect, authController.restrictTo('user'));\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(cartController.getLoggedUserCart)\r\n\t.post(cartController.addProductToCart)\r\n\t.delete(cartController.clearCart);\r\n\r\nrouter.patch('/applyCoupon', cartController.applyCoupon);\r\n\r\nrouter\r\n\t.route('/:id')\r\n\t.patch(cartController.updateCartItemQuantity)\r\n\t.delete(cartController.removeSpecificCartItem);\r\n\r\nmodule.exports = router;\r\n","const asyncHandler = require('express-async-handler');\r\n\r\nconst Cart = require('../models/cartModel');\r\nconst Product = require('../models/productModel');\r\nconst Coupon = require('../models/couponModel');\r\nconst AppError = require('../utilities/appError');\r\n\r\n/**********************************************************************************/\r\nconst calcCartTotalPrice = (cart) => {\r\n\t//calculate TotalPrice of Cart\r\n\tconst totalPrice = cart.cartItems.reduce(\r\n\t\t(acc, curr) => acc + curr.quantity * curr.price,\r\n\t\t0,\r\n\t);\r\n\tcart.totalPrice = totalPrice;\r\n\tcart.totalPriceAfterDiscount = undefined;\r\n};\r\n\r\n// @desc\t\tAdd Product To Cart\r\n// @route \tPOST  /api/v1/cart\r\n// @access\tPrivate --> (User)\r\nexports.addProductToCart = asyncHandler(async (req, res, next) => {\r\n\t// -Get product details to be used\r\n\tconst product = await Product.findById(req.body.product);\r\n\r\n\t// 1) Get Cart for logged user\r\n\tlet cart = await Cart.findOne({ user: req.user._id });\r\n\r\n\tif (!cart) {\r\n\t\t// 2) No Cart? ---> Create a new Cart for logged user with product\r\n\t\tcart = await Cart.create({\r\n\t\t\tuser: req.user._id,\r\n\t\t\tcartItems: [\r\n\t\t\t\t{\r\n\t\t\t\t\tproduct: req.body.product,\r\n\t\t\t\t\tquantity: req.body.quantity || 1,\r\n\t\t\t\t\tcolor: req.body.color,\r\n\t\t\t\t\tprice: product.price,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\t} else {\r\n\t\t// 3) Cart already exists? ---> get product ids in stock\r\n\t\tconst existingProductIndex = cart.cartItems.findIndex(\r\n\t\t\t(item) =>\r\n\t\t\t\titem.product.toString() === req.body.product &&\r\n\t\t\t\titem.color === req.body.color.toLowerCase(),\r\n\t\t);\r\n\r\n\t\t// A) Product is already in stock? --> update product's quantity\r\n\t\tif (existingProductIndex > -1) {\r\n\t\t\tcart.cartItems[existingProductIndex].quantity += req.body.quantity;\r\n\t\t}\r\n\t\t// B) new Product? ---> Push it to cartItems\r\n\t\telse {\r\n\t\t\tcart.cartItems.push({\r\n\t\t\t\tproduct: req.body.product,\r\n\t\t\t\tquantity: req.body.quantity || 1,\r\n\t\t\t\tcolor: req.body.color,\r\n\t\t\t\tprice: product.price,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t//calculate TotalPrice of Cart\r\n\tcalcCartTotalPrice(cart);\r\n\tawait cart.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Product added to cart successfully! 🤗',\r\n\t\tcartItems: cart.cartItems.length,\r\n\t\tdata: cart,\r\n\t});\r\n});\r\n\r\n// @desc\t\tGet a logged user Cart\r\n// @route \tGET  /api/v1/cart\r\n// @access\tPrivate --> (User)\r\nexports.getLoggedUserCart = asyncHandler(async (req, res, next) => {\r\n\tconst cart = await Cart.findOne({ user: req.user._id });\r\n\r\n\tif (!cart) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]} Does not have any items in his cart!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\tif (cart.user.toString() !== req.user._id.toString())\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`You are not authorized to access this cart. Only the user who created this cart can perform this action!`,\r\n\t\t\t\t403,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\tif (cart.cartItems.length === 0)\r\n\t\treturn next(new AppError(`Your cart is empty!`, 403));\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tcartItems: cart.cartItems.length,\r\n\t\tdata: cart,\r\n\t});\r\n});\r\n\r\n// @desc\t\tRemove specific Cart item\r\n// @route \tDELETE  /api/v1/cart/:id\r\n// @access\tPrivate --> (User)\r\nexports.removeSpecificCartItem = asyncHandler(async (req, res, next) => {\r\n\tconst cart = await Cart.findOneAndUpdate(\r\n\t\t{\r\n\t\t\tuser: req.user._id,\r\n\t\t},\r\n\t\t{\r\n\t\t\t$pull: { cartItems: { _id: req.params.id } },\r\n\t\t},\r\n\t\t{ new: true },\r\n\t);\r\n\r\n\tif (!cart) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]} Does not have any items in his cart!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\r\n\t//calculate TotalPrice of Cart\r\n\tcalcCartTotalPrice(cart);\r\n\tawait cart.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tcartItems: cart.cartItems.length,\r\n\t\tdata: cart,\r\n\t});\r\n});\r\n\r\n// @desc\t\tDelete Cart\r\n// @route \tDELETE  /api/v1/cart/\r\n// @access\tPrivate --> (User)\r\nexports.clearCart = asyncHandler(async (req, res, next) => {\r\n\tconst cart = await Cart.findOneAndDelete({\r\n\t\tuser: req.user._id,\r\n\t});\r\n\r\n\tif (!cart) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]} Does not have any items in his cart!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\r\n\tres.status(204).send();\r\n});\r\n\r\n// @desc\t\tUpdate specific Cart item quantity\r\n// @route \tPATCH  /api/v1/cart/:id\r\n// @access\tPrivate --> (User)\r\nexports.updateCartItemQuantity = asyncHandler(async (req, res, next) => {\r\n\t// 1) Find Cart\r\n\tconst cart = await Cart.findOne({ user: req.user._id });\r\n\tif (!cart) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]} Does not have any items in his cart!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\tif (cart.cartItems.length === 0)\r\n\t\treturn next(new AppError(`Your cart is empty!`, 403));\r\n\r\n\t// 2) Cart already exists? ---> get cart Id\r\n\tconst CartItemIdx = cart.cartItems.findIndex(\r\n\t\t(item) => item._id.toString() === req.params.id,\r\n\t);\r\n\r\n\tif (CartItemIdx === -1)\r\n\t\treturn next(\r\n\t\t\tnew AppError(`There's no cartItem with the id: ${req.params.id}`, 404),\r\n\t\t);\r\n\r\n\t// 3) Update cartItem quantity\r\n\tcart.cartItems[CartItemIdx].quantity = req.body.quantity;\r\n\r\n\t// 4) calculate TotalPrice of remaining CartItems and save\r\n\tcalcCartTotalPrice(cart);\r\n\r\n\tawait cart.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tcartItems: cart.cartItems.length,\r\n\t\tdata: cart,\r\n\t});\r\n});\r\n\r\n// @desc\t\tApply Coupon on logged user Cart\r\n// @route \tPOST  /api/v1/cart/applyCoupon\r\n// @access\tPrivate --> (User)\r\nexports.applyCoupon = asyncHandler(async (req, res, next) => {\r\n\t// 1) Get and check the validity of the coupon\r\n\tconst coupon = await Coupon.findOne({\r\n\t\tname: req.body.name,\r\n\t\texpires: { $gt: Date.now() },\r\n\t});\r\n\tif (!coupon) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.body.name} is not a valid Coupon or expired!!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\r\n\t// 2) Get logged user cart to get its totalPrice\r\n\tconst cart = await Cart.findOne({ user: req.user._id });\r\n\tif (!cart) {\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]}, You don't have any purchased items in your cart to apply coupon on!`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n\tif (cart.cartItems.length === 0)\r\n\t\treturn next(new AppError(`Your cart is empty!`, 403));\r\n\r\n\tconst { totalPrice } = cart;\r\n\r\n\t// 3) Apply the coupon to the total price\r\n\tconst discount = (totalPrice * (coupon.discount / 100)).toFixed(2);\r\n\r\n\t// 4) Update the cart's totalPrice after applying coupon\r\n\tcart.totalPriceAfterDiscount = totalPrice - discount;\r\n\r\n\t// 5) Save the updated cart\r\n\tawait cart.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tcartItems: cart.cartItems.length,\r\n\t\tdata: cart,\r\n\t});\r\n});\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\n\r\n//1- Create Schema\r\nconst cartSchema = new Schema(\r\n\t{\r\n\t\tcartItems: [\r\n\t\t\t{\r\n\t\t\t\tproduct: {\r\n\t\t\t\t\ttype: Schema.ObjectId,\r\n\t\t\t\t\tref: 'Product',\r\n\t\t\t\t},\r\n\t\t\t\tquantity: {\r\n\t\t\t\t\ttype: Number,\r\n\t\t\t\t\tdefault: 1,\r\n\t\t\t\t},\r\n\t\t\t\tprice: {\r\n\t\t\t\t\ttype: Number,\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t},\r\n\t\t\t\tcolor: {\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\tlowercase: true,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\ttotalPrice: {\r\n\t\t\ttype: Number,\r\n\t\t},\r\n\t\ttotalPriceAfterDiscount: {\r\n\t\t\ttype: Number,\r\n\t\t},\r\n\t\tuser: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'User',\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\ttoJSON: { virtuals: true }, // To include timestamps in the JSON output\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Cart', cartSchema);\r\n","const express = require('express');\r\nconst orderController = require('../controllers/orderController');\r\nconst authController = require('../controllers/authController');\r\n/*************************************************************************/\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(authController.protect);\r\n\r\nrouter.get(\r\n\t'/checkout-session/:cartId',\r\n\tauthController.restrictTo('user'),\r\n\torderController.getCheckoutSession,\r\n);\r\n\r\nrouter\r\n\t.route('/:cartId')\r\n\t.post(authController.restrictTo('user'), orderController.createCashOrder);\r\n// .get(orderController.getLoggedUserCart)\r\n// .delete(orderController.clearCart);\r\n\r\nrouter\r\n\t.route('/')\r\n\t.get(\r\n\t\tauthController.restrictTo('user', 'admin', 'manager'),\r\n\t\torderController.filterByRole,\r\n\t\torderController.getAllOrders,\r\n\t);\r\n\r\nrouter.route('/:id').get(orderController.getOrder);\r\n\r\nrouter\r\n\t.route('/:id/pay')\r\n\t.patch(\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\torderController.updateOrdertoPaid,\r\n\t);\r\n\r\nrouter\r\n\t.route('/:id/deliver')\r\n\t.patch(\r\n\t\tauthController.restrictTo('admin', 'manager'),\r\n\t\torderController.updateOrdertoDeliverd,\r\n\t);\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable no-console */\r\n/* eslint-disable import/no-extraneous-dependencies */\r\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\r\nconst asyncHandler = require('express-async-handler');\r\n\r\nconst Cart = require('../models/cartModel');\r\nconst Order = require('../models/orderModel');\r\nconst Product = require('../models/productModel');\r\nconst AppError = require('../utilities/appError');\r\nconst factory = require('./handlerFactory');\r\nconst User = require('../models/userModel');\r\n/**********************************************************************************/\r\n//HELPER FUNCTIONS\r\nexports.filterByRole = asyncHandler(async (req, res, next) => {\r\n\tif (req.user.role === 'user') {\r\n\t\treq.filterObj = { user: req.user._id };\r\n\t}\r\n\r\n\tnext();\r\n});\r\n/**********************************************************************************/\r\n\r\n// @desc\t\tGet All Orders\r\n// @route \tGET  /api/v1/orders\r\n// @access\tPrivate --> (User, Admin)\r\nexports.getAllOrders = factory.getAll(Order);\r\n\r\n// @desc\t\tGet a Specific Order\r\n// @route \tGET  /api/v1/orders/:id\r\n// @access\tPublic\r\nexports.getOrder = factory.getOne(Order);\r\n\r\n// @desc\t\tCreate cod(cash on delivery) Order\r\n// @route \tPOST  /api/v1/orders/cartId\r\n// @access\tPrivate --> (User)\r\nexports.createCashOrder = asyncHandler(async (req, res, next) => {\r\n\t// @App Settings\r\n\tconst taxPrice = 0;\r\n\tconst shippingPrice = 0;\r\n\r\n\t// 1) Get Cart with cartId and validate it belongs to logged user\r\n\tconst cart = await Cart.findById(req.params.cartId);\r\n\tif (!cart)\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]}, Either your cart does not exist, or you have no purchased items in it.`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\tif (cart.user.toString() !== req.user._id.toString())\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`You are not authorized to access this cart. Only the user who created this cart can perform this action!`,\r\n\t\t\t\t403,\r\n\t\t\t),\r\n\t\t);\r\n\tif (cart.cartItems.length === 0)\r\n\t\treturn next(new AppError(`Your cart is empty!`, 403));\r\n\r\n\t// 2) Get Order price depending on cart price \"Check if coupon applied\"\r\n\t// @@ Ternary Operator considers '0' as a valid value while || considers '0' as a falsy value@@\r\n\tconst cartPrice = cart.totalPriceAfterDiscount\r\n\t\t? cart.totalPriceAfterDiscount\r\n\t\t: cart.totalPrice;\r\n\tconst orderTotalPrice = cartPrice + taxPrice + shippingPrice;\r\n\r\n\t// const address = req.user._id &&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n\r\n\t// 3) Create order with default payment method (COD)\r\n\tconst order = await Order.create({\r\n\t\tuser: req.user._id,\r\n\t\tcartItems: cart.cartItems,\r\n\t\t// shippingAddress: req.user._id.address, &&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n\t\tshippingAddress: req.body.shippingAddress,\r\n\t\torderTotalPrice,\r\n\t});\r\n\r\n\t//--------------------------------------------------------------------\r\n\t//4) After Creating Order, decrement product quantity and increment product sold\r\n\r\n\t//--1st--//\t const products = cart.cartItems.map((item) => {\r\n\t//--1st--//\t \tconst { product } = item;\r\n\t//--1st--//\t \tconst { quantity } = item;\r\n\t//--1st--//\t \treturn { product, quantity };\r\n\t//--1st--//\t });\r\n\t//--1st--//\t await Product.updateMany(\r\n\t//--1st--//\t \t{ _id: { $in: products.product } },\r\n\t//--1st--//\t \t{ $inc: { quantity: -products.quantity, sold: +products.quantity } },\r\n\t//--1st--//\t );\r\n\r\n\t/*--2nd--*/ /*--2nd--*/ /*--2nd--*/ /*--2nd--*/ /*--2nd--*/ /*--2nd--*/ /*--2nd--*/\r\n\tif (order) {\r\n\t\tconst bulkOptions = cart.cartItems.map((item) => ({\r\n\t\t\tupdateOne: {\r\n\t\t\t\tfilter: { _id: item.product },\r\n\t\t\t\tupdate: {\r\n\t\t\t\t\t$inc: { quantity: -item.quantity, sold: +item.quantity },\r\n\t\t\t\t},\r\n\t\t\t\tupsert: true,\r\n\t\t\t},\r\n\t\t}));\r\n\t\tawait Product.bulkWrite(bulkOptions, {});\r\n\t\t// await Order.save();\r\n\t\t//--------------------------------------------------------------------\r\n\t\t//5) clear user cart depending on cartId\r\n\t\tawait Cart.findByIdAndDelete(req.params.cartId);\r\n\t}\r\n\r\n\t//6) send response\r\n\tres.status(201).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Order is created successfully! 🤗',\r\n\t\tdata: order,\r\n\t});\r\n});\r\n\r\n// @desc\t\tUpdate order payment status to paid\r\n// @route \tPATCH  /api/v1/orders/:id/pay\r\n// @access\tPrivate --> (Admin - Manager)\r\nexports.updateOrdertoPaid = asyncHandler(async (req, res, next) => {\r\n\tconst order = await Order.findById(req.params.id);\r\n\tif (!order)\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No Order found with the id:${req.params.id}!😞😞`, 404),\r\n\t\t);\r\n\r\n\tif (order.isPaid)\r\n\t\treturn next(\r\n\t\t\tnew AppError(`Order you're trying to update is already paid`, 404),\r\n\t\t);\r\n\r\n\t//update order paid status to paid\r\n\torder.isPaid = true;\r\n\torder.paidAt = Date.now();\r\n\r\n\tconst updatedOrder = await order.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Order updated successfully!',\r\n\t\tdata: {\r\n\t\t\torder: updatedOrder,\r\n\t\t},\r\n\t});\r\n});\r\n\r\n// @desc\t\tUpdate order delivery status to delivered\r\n// @route \tPATCH  /api/v1/orders/:id/deliver\r\n// @access\tPrivate --> (Admin - Manager)\r\nexports.updateOrdertoDeliverd = asyncHandler(async (req, res, next) => {\r\n\tconst order = await Order.findById(req.params.id);\r\n\tif (!order)\r\n\t\treturn next(\r\n\t\t\tnew AppError(`No Order found with the id:${req.params.id}!😞😞`, 404),\r\n\t\t);\r\n\r\n\tif (order.isDelivered)\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`Order you're trying to update is already Delivered`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\t//update order delivery status to delivered\r\n\torder.isDelivered = true;\r\n\torder.deliveredAt = Date.now();\r\n\r\n\tconst updatedOrder = await order.save();\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Order updated successfully!',\r\n\t\tdata: {\r\n\t\t\torder: updatedOrder,\r\n\t\t},\r\n\t});\r\n});\r\n\r\n// @desc\t\tGet Checkout Session from Stripe and send it as a response\r\n// @route \tGET  /api/v1/orders/checkout-session/:cartIds\r\n// @access\tPrivate --> (User)\r\nexports.getCheckoutSession = asyncHandler(async (req, res, next) => {\r\n\t// @App Settings\r\n\tconst taxPrice = 0;\r\n\tconst shippingPrice = 0;\r\n\r\n\t// 1) Get Cart with cartId and validate it belongs to logged user\r\n\tconst cart = await Cart.findById(req.params.cartId);\r\n\tif (!cart)\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`${req.user.name.split(' ')[0]}, Either your cart does not exist, or you have no purchased items in it.`,\r\n\t\t\t\t404,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\tif (cart.user.toString() !== req.user._id.toString())\r\n\t\treturn next(\r\n\t\t\tnew AppError(\r\n\t\t\t\t`You are not authorized to access this cart. Only the user who created this cart can perform this action!`,\r\n\t\t\t\t403,\r\n\t\t\t),\r\n\t\t);\r\n\tif (cart.cartItems.length === 0)\r\n\t\treturn next(new AppError(`Your cart is empty!`, 403));\r\n\r\n\t// 2) Get Order Price depend i=on cart price \"check if coupon applied\"\r\n\tconst cartPrice = cart.totalPriceAfterDiscount\r\n\t\t? cart.totalPriceAfterDiscount\r\n\t\t: cart.totalPrice;\r\n\tconst orderTotalPrice = cartPrice + taxPrice + shippingPrice;\r\n\r\n\t// 3) Create Stripe Checkout session\r\n\tconst session = await stripe.checkout.sessions.create({\r\n\t\texpand: ['line_items'], // a must\r\n\r\n\t\tmode: 'payment',\r\n\t\tsuccess_url: `${req.protocol}://${req.get('host')}/orders`,\r\n\t\tcancel_url: `${req.protocol}://${req.get('host')}/cart`,\r\n\t\tcustomer_email: req.user.email,\r\n\t\t// customer_address: req.body.shippingAddress,\r\n\t\tclient_reference_id: req.params.cartId,\r\n\t\tmetadata: {\r\n\t\t\taddress: req.body.shippingAddress,\r\n\t\t},\r\n\t\t// shipping_address_collection: req.body.shippingAddress,\r\n\t\tline_items: [\r\n\t\t\t{\r\n\t\t\t\tprice_data: {\r\n\t\t\t\t\tunit_amount: orderTotalPrice * 100, //amount expected in cents\r\n\t\t\t\t\tcurrency: 'egp',\r\n\t\t\t\t\tproduct_data: {\r\n\t\t\t\t\t\tname: `${req.user.name}'s Order`,\r\n\t\t\t\t\t\tdescription: `${req.body.shippingAddress}` || 'address',\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tquantity: 1,\r\n\t\t\t},\r\n\t\t],\r\n\t});\r\n\r\n\t// 4) Send Session to Response\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Checkout Session created successfully!',\r\n\t\tdata: { session },\r\n\t});\r\n});\r\n\r\nconst createCartOrder = async (session) => {\r\n\tconst cartId = session.client_reference_id;\r\n\tconst shippingAddress = session.metadata.address;\r\n\tconst orderAmount = session.amount_total / 100;\r\n\r\n\tconst cart = await Cart.findById(cartId);\r\n\tconst user = await User.findOne({ email: session.customer_email });\r\n\r\n\t// Create Order\r\n\tconst order = await Order.create({\r\n\t\tuser: user._id,\r\n\t\tcartItems: cart.cartItems,\r\n\t\tshippingAddress: shippingAddress,\r\n\t\torderTotalPrice: orderAmount,\r\n\t\tisPaid: true,\r\n\t\tpaidAt: Date.now(),\r\n\t\tpaymentMethod: 'card',\r\n\t});\r\n\r\n\t// Update product's quantity\r\n\tif (order) {\r\n\t\tconst bulkOptions = cart.cartItems.map((item) => ({\r\n\t\t\tupdateOne: {\r\n\t\t\t\tfilter: { _id: item.product },\r\n\t\t\t\tupdate: {\r\n\t\t\t\t\t$inc: { quantity: -item.quantity, sold: +item.quantity },\r\n\t\t\t\t},\r\n\t\t\t\tupsert: true,\r\n\t\t\t},\r\n\t\t}));\r\n\t\tawait Product.bulkWrite(bulkOptions, {});\r\n\t\t// await Order.save();\r\n\t\t//--------------------------------------------------------------------\r\n\t\t//5) clear user cart depending on cartId\r\n\t\tawait Cart.findByIdAndDelete(cartId);\r\n\t}\r\n};\r\n\r\n// @desc\t\tcreate Checkout Webhook from Stripe when payment is successful\r\n// @route \tPOST  /webhook-checkout\r\n// @access\tPrivate --> (User)\r\nexports.webhookCheckout = asyncHandler(async (req, res, next) => {\r\n\tconst sig = req.headers['stripe-signature'];\r\n\r\n\tlet event;\r\n\r\n\ttry {\r\n\t\tevent = stripe.webhooks.constructEvent(\r\n\t\t\treq.body,\r\n\t\t\tsig,\r\n\t\t\tprocess.env.STRIPE_WEBHOOK_SECRET_KEY,\r\n\t\t);\r\n\t} catch (err) {\r\n\t\treturn res.status(400).send(`Webhook Error: ${err.message}`);\r\n\t}\r\n\tif (event.type === 'checkout.session.completed') {\r\n\t\tconsole.log('Create Order Here...');\r\n\t\t//Create Order\r\n\t\tcreateCartOrder(event.data.object);\r\n\t}\r\n\r\n\tres.status(200).json({\r\n\t\tstatus: 'success',\r\n\t\tmessage: 'Webhook recieved successfully!',\r\n\t});\r\n});\r\n","const mongoose = require('mongoose');\r\n\r\nconst { Schema } = mongoose;\r\n\r\n//1- Create Schema\r\nconst orderSchema = new Schema(\r\n\t{\r\n\t\tuser: {\r\n\t\t\ttype: Schema.ObjectId,\r\n\t\t\tref: 'User',\r\n\t\t\trequired: [true, 'Order must belong to a specific user'],\r\n\t\t},\r\n\t\tcartItems: [\r\n\t\t\t{\r\n\t\t\t\tproduct: {\r\n\t\t\t\t\ttype: Schema.ObjectId,\r\n\t\t\t\t\tref: 'Product',\r\n\t\t\t\t},\r\n\t\t\t\tquantity: Number,\r\n\t\t\t\tprice: Number,\r\n\t\t\t\tcolor: String,\r\n\t\t\t},\r\n\t\t],\r\n\t\ttaxPrice: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tshippingPrice: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 30,\r\n\t\t},\r\n\t\torderTotalPrice: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tpaymentMethod: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true,\r\n\t\t\tenum: ['paypal', 'card', 'cod'],\r\n\t\t\tdefault: 'cod',\r\n\t\t},\r\n\t\tisPaid: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tpaidAt: Date,\r\n\t\tshippingAddress: {\r\n\t\t\tdetails: String,\r\n\t\t\tpostalCode: String,\r\n\t\t\tphone: String,\r\n\t\t\tcity: String,\r\n\t\t},\r\n\t\tisDelivered: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tdeliveredAt: Date,\r\n\t},\r\n\t{\r\n\t\ttimestamps: true,\r\n\t\ttoJSON: { virtuals: true }, // To include timestamps in the JSON output\r\n\t},\r\n);\r\n\r\n//------------------------------------------------------------------------\r\n//Middlewares\r\norderSchema.pre(/^find/, function (next) {\r\n\tthis.populate([\r\n\t\t{\r\n\t\t\tpath: 'user',\r\n\t\t\tselect: 'name email profilePicture',\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: 'cartItems.product',\r\n\t\t\tselect: 'title ratingsAverage',\r\n\t\t},\r\n\t]);\r\n\tnext();\r\n});\r\n\r\n//------------------------------------------------------------------------\r\n//2- Create Model\r\nmodule.exports = mongoose.model('Order', orderSchema);\r\n","const AppError = require('../utilities/appError');\r\n\r\nconst handleJWTError = () =>\r\n\tnew AppError('Invalid Token, Please login again!', 401);\r\n\r\nconst handleExpiredJWTError = () =>\r\n\tnew AppError('Expired Token, Please login again!', 401);\r\n\r\nconst sendErrorDev = (err, req, res) => {\r\n\tres.status(+err.statusCode).json({\r\n\t\tstatus: err.status,\r\n\t\tname: err.name,\r\n\t\tmessage: err.message,\r\n\t\terror: err,\r\n\t\tstack: err.stack,\r\n\t});\r\n};\r\nconst sendErrorProd = (err, req, res) => {\r\n\tif (err.name === 'JsonWebTokenError') err = handleJWTError();\r\n\tif (err.name === 'TokenExpiredError') err = handleExpiredJWTError();\r\n\r\n\tres.status(+err.statusCode).json({\r\n\t\tstatus: err.status,\r\n\t\tmessage: err.message,\r\n\t});\r\n};\r\n\r\n//Global Error Handling Middleware for Express\r\nmodule.exports = (err, req, res, next) => {\r\n\terr.statusCode = err.statusCode || 500;\r\n\terr.status = `${err.status}` || 'Error';\r\n\r\n\tif (process.env.NODE_ENV === 'development') sendErrorDev(err, req, res);\r\n\telse if (process.env.NODE_ENV === 'production') sendErrorProd(err, req, res);\r\n\r\n\tnext();\r\n};\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}